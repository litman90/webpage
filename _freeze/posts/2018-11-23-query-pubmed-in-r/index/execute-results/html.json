{
  "hash": "c9bd1b246c367d79e1bbdefe0ef95095",
  "result": {
    "markdown": "---\ntitle: Query Pubmed in R\ndate: 2018-11-23\ncategories: [\"r\",\"phd\"]\nexecute: \n  cache: true\n---\n\n\nI have seen a couple of presentations that use plots of PubMed query results. I have even seen some of them in papers. I just think it's really cool, so I wanted to play with something that could provide the data.\n\nA couple of google searches lead me into two nice options to do this in R.\n\n1)  `RISmed` package, see [CRAN](https://cran.r-project.org/web/packages/RISmed/index.html) or [Dave Tang's Blog](https://davetang.org/muse/2013/10/31/querying-pubmed-using-r/)\n2)  A custom approach from [Kristoffer Magnusson](https://github.com/rpsychologist/PubMed)\n\nI went with the custom approach, decided to **borrow heavily** from Kristoffer's repo, and did a few modifications here and there. Mainly, I updated libraries, included some `dplyr` output to make it cleaner, and separated functions into several files.\n\nYou can find the updated code in the following repo:\n\n<https://github.com/matiasandina/pubmed_query>\n\nThe logic of the code is to loop over the search terms and the years, performing queries to PubMed each time. To make things more friendly we wrap everything into a *main* function that performs some checks and handles the multiple calls to the working functions. This main function, `query_pubmed()`, expects a query (character vector), and 2 years for the time interval (`yrStart` and `yrMax`).\n\nThe function is somewhat self contained, if it can't find things on the local computer it will source from GitHub[^1]. Here's a little demo of the main function `query_pubmed()`. Since we are using internet to get the data, I assume the user will be able to source from GitHub (these calls are often performed via `devtools::source_url`).\n\n[^1]: Granted, several packages are needed to run the code. I assume users will know how to `install.packages(...)` if in need.\n\n## Little demo\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_522e8e7e5dd148bf87899f2cf750fab3'}\n\n:::\n\n\nLet's look for the term `hiv` in publications from the 1970 until today. PubMed requests us to limit the traffic to \\~3 queries per second. Thus, queries will take a while because the function has `Sys.sleep(0.5)` in between iterations. You will see a progress bar for each term (not shown here for simplicity).\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_5e1eebdfd48f74449c45b58036930ed4'}\n::: {.cell-output-display}\n![PubMed publications containing the term HIV relative to the total number of publications.](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nI chose to keep the graphic output as simple as possible (aka use ggplot2 defaults) and return a `data.frame` that can be fed into a custom `ggplot2` call later, if the users feel like it. Here's a glimpse of the returned object.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_b3e434bc6c9529beab9be03f23a54c16'}\n::: {.cell-output .cell-output-stdout}\n```\n  query_term year count total_count         freq\n1        hiv 1970     1      219426 0.0004557345\n2        hiv 1971     0      223658 0.0000000000\n3        hiv 1972     0      227949 0.0000000000\n4        hiv 1973     0      231159 0.0000000000\n5        hiv 1974     0      235136 0.0000000000\n6        hiv 1975     1      249241 0.0004012181\n```\n:::\n:::\n\n\n## Making things faster\n\nTotal publication numbers should not change[^2]. Thus, if we don't want to waste time grabbing the total number of publications over and over, we can either:\n\n[^2]: There are some variations in the recent years as the data base updates, but shouldn't be significant for these purposes.\n\n1)  Use `get_totals()`\n2)  Get it from GitHub\n\nI will do my best, but I can't be certain I will keep running the function and pushing once a year to GitHub (as in forever)[^3]. I don't feel like waiting, I already have a recent version in the repo.\n\n[^3]: Yes, I guess I could automate it but reaching diminishing returns here...\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_14cbbdf10e863197b271872e8a7ef716'}\n\n:::\n\n\nHaving this object around will speed the main function (it will not query PubMed every year for the totals). Here's a graph of the number of publications by year:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_787d35ca1fe65647c5a55ceab9da3e41'}\n::: {.cell-output-display}\n![Total publications in PubMed by year. Science is growing :)](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Multiple terms\n\nWe can use multiple terms to query, just make a character vector. For example, let's add `aids` and `hepatitis b`:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_0c5324bd417076d9b6535a45c154d894'}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nBecause we saved the previous object in the environment, we don't have to query again, we can merge the data and plot all together.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_6c46215540d6695521d335735d97f147'}\n::: {.cell-output-display}\n![Frequency of query terms. Relative to total number of PubMed entries per year.](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWe see that the term `aids` came first in the literature, before the virus was identified, in the early 1980s. Although strongly correlated with `aids`, `hiv` is a term with higher frequency. Research for `hepatitis b` seems to have kept a constant relative level, growing as much as the total body of research.\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}