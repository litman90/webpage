{
  "hash": "ec424de821edc890b8e9eb5b7d36b01d",
  "result": {
    "markdown": "---\ntitle: \"Writing Checklist\"\ndate: 2020-01-02\ntags: [\"writing\", \"learning\", \"documentinglearning\", \"R\"]\nexecute: \n  echo: true\n---\n\n\nI spent a good portion of the end of 2019 and the beginning of 2020 reading Paul Graham's essays. Many caught my attention (and my fingers to take notes). I want to comment on an essay about advice for good writing. Because it was written in a way that allowed for easy reformatting (ideas separated by `;`), I thought it would be cool to convert the prose into a checklist).  \n\n## Creating the checklist\n\nThe main text comes from [here](http://www.paulgraham.com/writing44.html). For simplicity, I have only used the main paragraph (aka, copy and paste the second paragraph). I omitted it here because it would be long and you can read it in the native format from the source.\n\n\n::: {.cell}\n\n:::\n\n\nIn the code chunk below I comment the steps I took.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# text is copy-paste of the second paragraph\n# text <- c(\"...\") ... == copy-paste\n\n# split using \"; \"\nsp <- stringr::str_split(text, \"; \")\n\n# To create a checklist\n# DASH SPACE [ ] SPACE SPACE\nsp <- paste0(\"- [ ]  \", unlist(sp))\n# append markdown title\nsp <- c(\"# Paul Graham's Writing Checklist\", sp)\n\n# Capitalize first letter of every sentence\nsp <- stringr::str_to_sentence(sp)\n```\n:::\n\n\nIf you want to write it to file, you can use `writeLines()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# write\nfileConn <- file(\"paul_graham_writing_checklist.md\")\nwriteLines(sp, fileConn)\nclose(fileConn)\n\n# If you want to knit to html you can do this\n# knitr::knit2html(\"paul_graham_writing_checklist.md\")\n```\n:::\n\n\nLet's take a look at the product:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# printing for web post\ncat(sp, sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Paul graham's writing checklist\n- [ ]  Write a bad version 1 as fast as you can\n- [ ]  Rewrite it over and over\n- [ ]  Cut out everything unnecessary\n- [ ]  Write in a conversational tone\n- [ ]  Develop a nose for bad writing, so you can see and fix it in yours\n- [ ]  Imitate writers you like\n- [ ]  If you can't get started, tell someone what you plan to write about, then write down what you said\n- [ ]  Expect 80% of the ideas in an essay to happen after you start writing it, and 50% of those you start with to be wrong\n- [ ]  Be confident enough to cut\n- [ ]  Have friends you trust read your stuff and tell you which bits are confusing or drag\n- [ ]  Don't (always) make detailed outlines\n- [ ]  Mull ideas over for a few days before writing\n- [ ]  Carry a small notebook or scrap paper with you\n- [ ]  Start writing when you think of the first sentence\n- [ ]  If a deadline forces you to start before that, just say the most important sentence first\n- [ ]  Write about stuff you like\n- [ ]  Don't try to sound impressive\n- [ ]  Don't hesitate to change the topic on the fly\n- [ ]  Use footnotes to contain digressions\n- [ ]  Use anaphora to knit sentences together\n- [ ]  Read your essays out loud to see (a) where you stumble over awkward phrases and (b) which bits are boring (the paragraphs you dread reading)\n- [ ]  Try to tell the reader something new and useful\n- [ ]  Work in fairly big quanta of time\n- [ ]  When you restart, begin by rereading what you have so far\n- [ ]  When you finish, leave yourself something easy to start with\n- [ ]  Accumulate notes for topics you plan to cover at the bottom of the file\n- [ ]  Don't feel obliged to cover any of them\n- [ ]  Write for a reader who won't read the essay as carefully as you do, just as pop songs are designed to sound ok on crappy car radios\n- [ ]  If you say anything mistaken, fix it immediately\n- [ ]  Ask friends which sentence you'll regret most\n- [ ]  Go back and tone down harsh remarks\n- [ ]  Publish stuff online, because an audience makes you write more, and thus generate more ideas\n- [ ]  Print out drafts instead of just looking at them on the screen\n- [ ]  Use simple, germanic words\n- [ ]  Learn to distinguish surprises from digressions\n- [ ]  Learn to recognize the approach of an ending, and when one appears, grab it.\n```\n:::\n:::\n\n\nThe checklist is not in strict chronological order, so I might try to reshape it later into something that would make more sense as a timeline. It will render as a checklist in something that is GitHub flavored (e.g., on GitHub). However, I will probably just use it as text file or print it as is. \n\nI also noticed that the link for the Spanish translation is broken/outdated, so I tried my best to translate it. [Here it is](/2020/01/escribiendo-en-pocas-palabras/)\n\n## Summary\n\nI think this checklist is an awesome learning opportunity and a clear path to improving one's writing. Quite happy to have found it, looking forward to improving my skills.\n\nI got to learn a few cool R things like, 1) I can use `writeLines()` to write a `.md` file and 2) `stringr::str_to_sentence()` is an **awesome** function.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}