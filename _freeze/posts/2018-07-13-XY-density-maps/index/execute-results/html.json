{
  "hash": "2391a6e1ae602096a5566fb1a73c355e",
  "result": {
    "markdown": "---\ntitle: \"XY-density-maps\"\ndate: 2018-07-13\ncategories: [\"R\"]\nexecute: \n  echo: true\n---\n\n\nI have been playing around with tracking software and the ways to visualize the position of an animal in an arena over time. Even with normal cameras (30 Hz) and relatively small periods of time (~5 min) we get massive datasets and the only way to make sense of them is to aggregate data over time. I have been interested in neat visualizations (using R), thus here are some ways/comments. I will explore different packages and doing comparisons of the results.\n\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(RColorBrewer))\nsuppressPackageStartupMessages(library(KernSmooth))\nsuppressPackageStartupMessages(library(raster))\nsuppressPackageStartupMessages(library(ggplot2))\nsuppressPackageStartupMessages(library(dplyr))\n```\n:::\n\n\n\n## Data\n\nI have an example dataset with `XY` position of the animal. I also have other morphological data that is irrelevant for this case. See example below: \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         X        Y Orientation MinorAxis MajorAxis\n1 325.5522 158.9700   -1.550285  50.47925  130.5679\n2 323.3055 156.6896   -1.569706  51.29840  130.3467\n3 321.7411 154.8107    1.545683  52.13492  130.3881\n4 320.8373 153.3294    1.512549  52.67011  130.6403\n5 320.0381 152.5523    1.477299  53.07783  130.1023\n6 319.3961 152.2019    1.439171  53.75891  129.6706\n```\n:::\n:::\n\n\n\nI will do some setup that is common for all the graphs (aka, color palette and the dimensions of the arena).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get color palette \n\nrefCol <- colorRampPalette(rev(brewer.pal(6,'Spectral')))\nmycol <- refCol(6)\n\n# define bin sizes\nbin_size <- 40\n\n# Camera resolution is 640x480. Hence...\nxbins <- 640/bin_size \nybins <- 480/bin_size\n```\n:::\n\n\n## ggplot2\n\nThe reason I always go to `ggplot2` first is because it's awesome, I buy into the grammar and find it intuitive to accumulate layers over layers. The underlying thought is that `ggplot2` handles all problems. In this case, the result has some pros (layers, layers and more layer), and some cons (basically, it doesn't look amazing). \n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(rat_pos, aes(X,Y)) + \n  stat_density2d(geom = 'tile', \n                 aes(fill = after_stat(density)), \n                 contour = FALSE,\n                 n = c(xbins, ybins)) +\n  coord_equal() +\n  theme_minimal() +\n  scale_fill_gradientn(colors =  mycol) +\n  geom_vline(xintercept = c(0,640))+\n  geom_hline(yintercept = c(0,480))\n\nprint(p)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot2-option-1-1.png){width=672}\n:::\n:::\n\n\nThis is interesting because we can overlay things into the plot. For example the trace:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + geom_path(alpha=0.1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot2-option-1-trace-1.png){width=672}\n:::\n:::\n\n\n\nWe can further remove the axis (or any other modifications we feel like doing). \n\n\n::: {.cell}\n\n```{.r .cell-code}\np + geom_path(alpha=0.5) + theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot2-option-1-noborder-1.png){width=672}\n:::\n:::\n\n\n### Helping ggplot from outside\n\nI found that, if we calculate the density externally, it looks smoother. This is a mixed, `bkde2D` mediated, `ggplot2` approach (aka the best of 2 worlds).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbins <- bkde2D(as.matrix(rat_pos[,1:2]), \n               bandwidth = c(xbins, ybins),\n               gridsize = c(640L, 480L))\n\n# reshape\nbins_to_plot <- tidyr::pivot_longer(\n  data.frame(bins$fhat) %>% tibble::rownames_to_column(), \n  cols = -rowname) %>% \n  # fix the name column\n  mutate(name = stringr::str_remove(name, \"X\")) %>% \n  # convert to numeric\n  mutate_all(as.numeric)\n\n\nggplot(bins_to_plot, aes(rowname, name, fill = value)) +\n  geom_raster()+\n  coord_equal() +\n  theme_minimal() +\n  scale_fill_gradientn(colors =  mycol) +\n  geom_vline(xintercept = c(0,640))+\n  geom_hline(yintercept = c(0,480))+\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot2-option-2-1.png){width=672}\n:::\n:::\n\n\n### 2023 Update\n\nAs of 2023, ggplot is able to handle 2D density heatmaps much better. I haven't played too much with it, but here are some examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rat_pos, aes(X,Y)) + \n           stat_density_2d(geom = \"polygon\", \n                           contour = TRUE,\n                           aes(fill = after_stat(level)),\n                  bins = 8)+\n  coord_equal() +\n  scale_fill_gradientn(colors =  mycol) +\n  theme_minimal() +\n  geom_vline(xintercept = c(0,640))+\n  geom_hline(yintercept = c(0,480))+\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rat_pos, aes(X,Y)) + \n  geom_density_2d_filled(bins = 8)+\n  coord_equal() +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Spectral\", direction = -1)+\n  geom_vline(xintercept = c(0,640))+\n  geom_hline(yintercept = c(0,480))+\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## Using raster package\n\nThe `raster` package is maybe an older solution, which is surprisingly low demand. In 3 lines of code we get a perfectly functional plot. On the other hand, it's not the best looking graph and we get the caveats (yes, `base` graphics).   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- raster(xmn=0, ymn=0, xmx=640, ymx=480, res=20)\nx <- rasterize(rat_pos[,1:2], r, fun='count')\nplot(x, xlim=c(0,640), ylim=c(0,480), xaxt='n', ann=FALSE, yaxt='n')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/raster-package-1.png){width=672}\n:::\n:::\n\n\n\n## Documentation \n\nI have found a good amount of advice and inspiration in the links below. \n\n* http://stat405.had.co.nz/ggmap.pdf\n* https://stackoverflow.com/questions/24078774/overlay-two-ggplot2-stat-density2d-plots-with-alpha-channels?lq=1\n* https://www.r-bloggers.com/5-ways-to-do-2d-histograms-in-r/\n* https://stackoverflow.com/questions/24845652/specifying-the-scale-for-the-density-in-ggplot2s-stat-density2d\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}