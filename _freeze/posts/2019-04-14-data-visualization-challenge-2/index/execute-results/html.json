{
  "hash": "d98b4083512024fe6b9f19f4606856ef",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization Challenge 2\"\ndate: 2019-04-14\ncategories: [\"R\",\"learning\"]\nexecute: \n  echo: true\ncode-fold: true\ncode-summary: \"Show the code\"\n---\n\n\nThis post is made as a backup for the data visualization challenge number 2. Data comes from the daily posts of the members of the Data Visualization Society (DVS) on the DVS Slack channels. You can see everybody's submissions for the challenge [here](https://www.datavisualizationsociety.com/challenge2).\n\nI am also very motivated to explore the dark versions of the ggplot themes. The package I'm going to be using is called `ggdark`.\n\n## Dive in\n\nThese are the libraries we'll need:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggdark)\nlibrary(lubridate)\n```\n:::\n\n\nWe read the data from the repository.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv(\"https://raw.githubusercontent.com/data-visualization-society/datavizsociety/master/challenge_data/dvs_challenge_2_channel_topics_over_time/flattened_channel_data.csv\")\n```\n:::\n\n\nLet's perform some summary stats. There's 62 channels, but I will focus on the top 15 channels as ranked by their total volume of characters. I'm using this metric because the correlation between characters and the number of posts is, naturally, good.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(posts+responses, characters))+\n  geom_smooth(method = \"lm\", se=FALSE, lty=2)+\n  geom_point(alpha=0.4)+\n  dark_theme_bw()+\n  scale_y_continuous(labels = scales::label_number_si())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nSummary.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum_df <- df %>% group_by(channel) %>%\n  summarise(total_channel = sum(characters),\n         median_channel = median(characters)) %>%\n  top_n(15, wt =  total_channel) %>%\n  arrange(desc(total_channel))\n```\n:::\n\n\nModify the original data and do some stats.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% group_by(channel) %>%\n  mutate(total_channel = sum(characters),\n         median_channel = median(characters),\n         char_per_ping = characters/(posts+responses))   %>%\n  ungroup() %>%\n  group_by(date) %>%\n  mutate(daily_flow = sum(characters),\n         daily_posts = sum(posts+responses))%>%\n  ungroup()\n```\n:::\n\n  \n\n## First pair\n\nThe idea behind the first pair of plots is to see the sheer amount of volume on certain channels. \n\nA good way of seeing how the top channels are ordered according to output is to do an ordered boxplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_box <-  df %>%\n  filter(channel %in% unique(sum_df$channel)) %>%\n  mutate(channel=fct_reorder(factor(channel), median_channel)) %>%\nggplot(aes(channel, log10(characters)))+\n  geom_boxplot()+\n  coord_flip()+\n  dark_theme_bw()+\n  labs(x=\"\")+\n  ggtitle(sprintf(\"Top %s Channels\",\n                  length(unique(sum_df$channel))),\n          \"Metric: median characters\")\n```\n:::\n\n\n\nI'm also curious about how persistent in time the flow is. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwave <- df %>%\n  filter(channel %in% unique(sum_df$channel)) %>%\n  mutate(channel=fct_reorder(factor(channel), total_channel)) %>% \n  ggplot(aes(date, channel, color=log10(characters))) +\n  geom_line(aes(lwd=characters))+\n  dark_theme_bw()+\n  labs(y = \"\", x=\"Date\")+\n  guides(color = FALSE)+\n  scale_color_gradient(low = \"#613A00\", high=\"#FA9800\")+\n  ggtitle(\"Top 15 channels\", \n          \"Metric: total characters\")+\n  scale_y_discrete(position = \"right\")+\n  theme(legend.position = \"none\")\n```\n:::\n\n\n\nWe put everything together with the `cowplot` package.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncowplot::plot_grid(top_box, wave)\n# Save the plot\n#ggsave(\"box_wave.svg\", width = 8, height = 4, units = \"in\", dpi=\"retina\")\n```\n:::\n\n\nI later modified this output a bit using Inkscape.\n\n![](box_wave.svg)\n\n## Lengthy channels\n\nWhile most of the channels have a low median, even below a full tweet, it looks like some channels tend to have very lengthy posts.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate median\nmedian_post <- median(\n  df$characters/(df$posts +df$responses))\n\n# Do the plot  \nlengthy <- ggplot(df, aes(log10(total_channel),\n               char_per_ping))+\n  dark_theme_bw()+\n  geom_hline(yintercept = 280, lty=2)+\n  geom_hline(yintercept = median(\n    df$characters/(df$posts +df$responses)), lty=2)+\n  annotate(\"text\", x = 3, y= c(200, 340), label=c(\"Median post\",\n                                            \"One tweet\"))+\n         geom_point(aes(color=channel), alpha=0.9)+\n         scale_color_viridis_d(direction = -1)+\n         theme(legend.position = \"none\")+\n  ggrepel::geom_text_repel(data=filter(df,\n                                       char_per_ping > 850),\n            aes(label = channel, color=channel))+\n  labs(x=bquote(\n    log10 ~\"(total characters)\"),\n    y=\"characeters per post\")+\n  ggtitle(\"Channels with lengthy posts\")\n\n\n# Save\n# ggsave(\"lengthy.svg\", width = 8, height = 4, units = \"in\",dpi=\"retina\")\n```\n:::\n\n\n\n![](lengthy.svg)\n\n## Share of flow\n\nWhat is the share of each channel on the total flow within the DataViz Slack?  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_top_channels <- sum_df %>%\n  arrange(desc(total_channel)) %>%\n  slice(1:5)\n\nshare <- df %>% group_by(date) %>%\n  mutate(big_channel = ifelse(channel %in% top_top_channels$channel,\n                              channel, \"other\"),\n    total=sum(characters),\n    rel_char = characters/total) %>%\n  ggplot(aes(date, rel_char, fill=big_channel))+\n  geom_col(width = 1)+\n  scale_fill_viridis_d(direction = -1)+\n  dark_theme_bw()+\n  theme(legend.position=c(.85,.5))+\n  labs(x=\"\", y=\"Relative share\", fill=\"Channel\")+\n  ggtitle(\"Share of the conversation\",\n          \"Relative share of the total characters per day\")+\n  scale_x_date(limits = c(as.Date(\"2019-02-18\"),\n                          as.Date(\"2019-04-23\")),\n               date_breaks = \"1 week\", \n               date_labels = \"%b-%d\")\n```\n:::\n\n\n\nIt seems the initial bump was driven by many (lengthy) introductions, and nowadays the discussion has moved towards other channels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintro_decay <-  ggplot(df, aes(date, daily_flow))+\n  geom_line()+\n  geom_line(data=filter(df, channel %in% c(\n    \"-introductions\")),\n            aes(date, characters), color=\"yellow\")+\n  dark_theme_bw()+\n  xlab(\"\") + \n  ylab(\"Daily characters\")+\n  annotate(\"text\", x=as.Date(c(\"2019-04-10\",\n                               \"2019-04-08\")),\n           y = c(1000, 50000),\n           label=c(\"-introductions\", \"all channels\"),\n           color=c(\"yellow\", \"white\"))+\n    scale_x_date(limits = c(as.Date(\"2019-02-18\"),\n                              as.Date(\"2019-04-23\")),\n                 date_breaks = \"1 week\", \n                 date_labels = \"%b-%d\") +\n  scale_y_continuous(labels = scales::label_number_si())\n```\n:::\n\n\n\nLet's see how it looks like.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We put everything together with cowplot\ncowplot::plot_grid(share,intro_decay,\n                   nrow = 2, rel_heights = c(2,1))\n# save\nggsave(filename = \"share_plot.svg\", \n       width = 12, \n       height = 6, \n       dpi=\"retina\")\n```\n:::\n\n\nThe final version is this one.  \n\n![](share_plot.svg)\n\n## Weekday news \n\nBecause everything is seasonal, let's analyze by days of the week. Seems like Tuesday to Thursday are the days with most movement, waning down on Friday and into the weekend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(wday(date, label=TRUE, abbr = TRUE, week_start = 1),\n               daily_posts))+\n  geom_line(color=\"gray80\")+\n  stat_summary(geom = \"point\",\n               fun = median, size=2.5)+\n  dark_theme_bw()+\n  labs(x=\"\", y=\"Number of daily posts\",\n       title = \"Weekly post variations\",\n       subtitle = \"Points represent median daily post.\\nLines show full data range.\")\n\n# ggsave(filename= \"weekly_vars.svg\", width = 8, height = 6 , dpi=\"retina\")\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}