---
title: "Github style calendar heatmaps"
date: 2018-05-27
categories: ["research", "design", "R"]
execute: 
  echo: true
code-fold: true
code-summary: "Show the code"
---

## The Commit Heatmap

I like how the commit heatmap looks in Github. I wanted to play with something that could be plotted that way. I've seen some beautiful things done in `d3` and javascript. But, of course, I wanted to make it in `R`. Turns out a bunch of other people have great ideas for how to go about it. Thus, I'm borrowing heavily from them[^1].

[^1]: Great resources [here](https://vuorre.netlify.com/post/2016/2016-03-24-github-waffle-plot/), [and here](http://ethen8181.github.io/Business-Analytics/articles/calendar_heatmaps/calendar_heatmaps.html)

## Loading packages

We will need a few packages to generate this plot.

```{r}
#| label: setup
#| message: !expr F
#| warning: !expr F

library(ggplot2)
library(dplyr)
library(lubridate)
library(viridis)  # Color palette
library(ggthemes) # theme tufte


```

## The data

Let's generate a `data.frame` for May 2018. We want the `date` as `datetime` and we also want to extract values from that date (month, year, week, ...).

```{r}
# choose dates
start_date <- ymd("2018-05-01")
end_date <- ymd("2018-05-31")

d <- tibble::tibble(
    date = seq(start_date, end_date, by = "days"),
    month = month(date),
    year = format(date, "%Y"),
    week = as.integer(format(date, "%W")) + 1,  # Week starts at 1
    day = factor(weekdays(date, T), 
                 levels = rev(c("Mon", "Tue", "Wed", "Thu",
                                "Fri", "Sat", "Sun"))))


```

This is how the data we generated looks like:

```{r}
#| label: data-preview

head(d)

```

Now, let's assume I registered some events in my life and that my data looks something like: A date column `date`, and the number of events that happened on a particular date (`n`).

```{r}
#| label: toy-data
#| echo: !expr F

df <- structure(list(date = structure(c(17666, 17667, 17668, 17669, 
17670, 17671, 17672, 17673, 17674, 17675, 17676, 17677, 17678
), class = "Date"), n = c(1L, 1L, 1L, 2L, 4L, 2L, 2L, 2L, 2L, 
5L, 2L, 1L, 4L)), .Names = c("date", "n"), class = c("tbl_df", 
"tbl", "data.frame"), row.names = c(NA, -13L))

```

Again, here's how the data looks like.

```{r}
#| label: mydata

df

```

I can join both `data.frames` and visualize!

```{r}
#| label: line-plot
#| warning: false

df_plot <- d %>% left_join(df, by = "date") 

df_plot %>%
  mutate(n=ifelse(is.na(n), 0, n)) %>% ## Fill the NAs with zeros
  ggplot(aes(date, n)) +
  geom_line(lwd=0.7)+
  geom_point(size=2, shape=21, fill="black", colour="white", stroke=2)+
    theme_classic() +
  theme(panel.background = element_rect(colour = "black"))+
  ylab("Number of events")

```

My goal is not to analyze long term trends like seasonality. Thus, this plot is rather unremarkable. Not only because it is a small toy-like dataset, but because it fails to inform calendar information. Let's try to make it better!

## Abstracting into functions

A good way of improving the procedure is to abstract things into a function we can call `calendar_plot()`.

```{r}

calendar_plot <- function(data, color.scale = "viridis",
                          viridis.pal = "D", dir = 1){
  
  p <- ggplot(data, aes(x = week, y = day, fill = n)) +
    geom_tile(color = "white", size = 0.8) +
    facet_wrap("year", ncol = 1) +
    theme_tufte() +
    theme(axis.ticks = element_blank(),
          legend.position = "bottom",
          legend.key.width = unit(1, "cm"),
          strip.text = element_text(hjust = 0.01,
                                    face = "bold", size = 12),
          text = element_text(size=16)) + 
    ylab("")
  
  
  
  # Let's add more than one possible pallete. Default keeps being viridis
  # Add case switch? or add 'none' for user to define their own ?
  
  if(color.scale=="viridis"){
    
    
    p <- p + scale_fill_viridis(name="Number of Events", 
                                # Variable color palette
                                option = viridis.pal,  
                                # Variable color direction
                                direction = dir,  
                                na.value = "grey93",
                                limits = c(1, max(data$n)))
    
  } else if(color.scale == 'greens') {
    
    p <- p + 
      scale_fill_gradient(name="Number of Events",
                          low="lightyellow2", 
                          high="darkgreen", 
                          na.value = "grey93")
  } else{
    
    error("Accepted color.scale are 'viridis' and 'greens'")
    
  }
  
  
  ## x axis control of labels
  
  
  num_months <- length(unique(data$month))
  
  if(num_months > 1){
    
    p <- p + scale_x_continuous(
      expand = c(0, 0),
      breaks = seq(1, 52, length = 12),
      labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
                 "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
    
  } else {
    
    # do nothing
    
    p <- p + xlab("Week Number.")
    
  }
  
  
  
  print(p)
}


```

We can use `calendar_plot()` function now to make a plot in *calendar-like* shape. It is easier to see the data, even with such as small dataset. Below there are two color scale representations of the same data.

```{r}
#| label: calendar-plot

calendar_plot(df_plot, 'greens')

calendar_plot(df_plot, viridis.pal = "B")

```

------------------------------------------------------------------------

## Update

I was curious about how data would look like for a longer span. Here's the data for a longer time interval.

```{r}
#| label: updated-data
#| echo: false

df <- read.csv(file = '2018-05-27_longer_data.csv',
               stringsAsFactors = FALSE)
# Convert to date
df$date <- ymd(df$date)
# choose dates
start_date <- ymd("2018-05-01")
end_date <- ymd("2018-08-31")

d <- data_frame(
    date = seq(start_date, end_date, by = "days"),
    month = month(date),
    year = format(date, "%Y"),
    week = as.integer(format(date, "%W")) + 1,  # Week starts at 1
    day = factor(weekdays(date, T), 
                 levels = rev(c("Mon", "Tue", "Wed", "Thu",
                                "Fri", "Sat", "Sun"))))

df_plot <- d %>% left_join(df, by = "date") 


```

```{r}
#| label: update-plot

calendar_plot(df_plot)

```

By no means this is a perfect function and is far from tested. For example, when I did this update, I realized that my `calendar_plot()` function should handle internally the creation of the `data.frame` named `d` that serves as a placeholder. I guess that will happen in a following update `:)`.

------------------------------------------------------------------------
