---
title: Query Pubmed in R
date: 2018-11-23
categories: ["r","phd"]
execute: 
  cache: true
---

I have seen a couple of presentations that use plots of PubMed query results. I have even seen some of them in papers. I just think it's really cool, so I wanted to play with something that could provide the data.

A couple of google searches lead me into two nice options to do this in R.

1)  `RISmed` package, see [CRAN](https://cran.r-project.org/web/packages/RISmed/index.html) or [Dave Tang's Blog](https://davetang.org/muse/2013/10/31/querying-pubmed-using-r/)
2)  A custom approach from [Kristoffer Magnusson](https://github.com/rpsychologist/PubMed)

I went with the custom approach, decided to **borrow heavily** from Kristoffer's repo, and did a few modifications here and there. Mainly, I updated libraries, included some `dplyr` output to make it cleaner, and separated functions into several files.

You can find the updated code in the following repo:

<https://github.com/matiasandina/pubmed_query>

The logic of the code is to loop over the search terms and the years, performing queries to PubMed each time. To make things more friendly we wrap everything into a *main* function that performs some checks and handles the multiple calls to the working functions. This main function, `query_pubmed()`, expects a query (character vector), and 2 years for the time interval (`yrStart` and `yrMax`).

The function is somewhat self contained, if it can't find things on the local computer it will source from GitHub[^1]. Here's a little demo of the main function `query_pubmed()`. Since we are using internet to get the data, I assume the user will be able to source from GitHub (these calls are often performed via `devtools::source_url`).

[^1]: Granted, several packages are needed to run the code. I assume users will know how to `install.packages(...)` if in need.

## Little demo

```{r}
#| echo: false
#| message: false
#| warning: false
library(ggplot2)
library(dplyr)
devtools::source_url("https://raw.githubusercontent.com/matiasandina/pubmed_query/master/src/query_pubmed.R")
```

Let's look for the term `hiv` in publications from the 1970 until today. PubMed requests us to limit the traffic to \~3 queries per second. Thus, queries will take a while because the function has `Sys.sleep(0.5)` in between iterations. You will see a progress bar for each term (not shown here for simplicity).

```{r}
#| message: false
#| include: true
#| results: hide
#| warning: false
#| fig.cap: PubMed publications containing the term HIV relative to the total number
#|   of publications.
hiv <- query_pubmed("hiv", 1970, 2018)

```

I chose to keep the graphic output as simple as possible (aka use ggplot2 defaults) and return a `data.frame` that can be fed into a custom `ggplot2` call later, if the users feel like it. Here's a glimpse of the returned object.

```{r}
head(hiv)
```

## Making things faster

Total publication numbers should not change[^2]. Thus, if we don't want to waste time grabbing the total number of publications over and over, we can either:

[^2]: There are some variations in the recent years as the data base updates, but shouldn't be significant for these purposes.

1)  Use `get_totals()`
2)  Get it from GitHub

I will do my best, but I can't be certain I will keep running the function and pushing once a year to GitHub (as in forever)[^3]. I don't feel like waiting, I already have a recent version in the repo.

[^3]: Yes, I guess I could automate it but reaching diminishing returns here...

```{r}
# Option one: run the function
# total_table_updated <- get_totals(1947,2018)

# Option two
total_table_updated <- read.csv('https://raw.githubusercontent.com/matiasandina/pubmed_query/master/data/total_table_updated.csv')

```

Having this object around will speed the main function (it will not query PubMed every year for the totals). Here's a graph of the number of publications by year:

```{r}
#| echo: false
#| fig.cap: Total publications in PubMed by year. Science is growing :)

ggplot(total_table_updated, 
       aes(year, total_count))+
  geom_area(alpha = 0.9, 
            color = "black", 
            linewidth = 0.8)+
  theme_bw()+
  labs(title = "Science Grows at Exponential Pace", 
       y = "Number of publications")+
  scale_y_continuous(labels = scales::label_number_si())

```

## Multiple terms

We can use multiple terms to query, just make a character vector. For example, let's add `aids` and `hepatitis b`:

```{r}
#| warning: false
#| include: true
#| results: hide
aids_hepB <- query_pubmed(c('aids', 'hepatitis b'), 1970, 2018)
```

Because we saved the previous object in the environment, we don't have to query again, we can merge the data and plot all together.

```{r}
#| warning: false
#| fig.cap: Frequency of query terms. Relative to total number of PubMed entries per
#|   year.

bind_rows(hiv, aids_hepB) %>%
  ggplot(aes(year, freq, fill=query_term)) +
  geom_area(position = "identity",
            alpha=0.6)+
  geom_line(lwd=0.4, color="black")+
  scale_fill_manual(values = c("#EBCF02",
                               "gray10",
                               "#1AD0EE"))+
  theme_bw()+
  theme(legend.position = "bottom",
        legend.title = element_blank())+
  ylab("Relative frequency (%)")

```

We see that the term `aids` came first in the literature, before the virus was identified, in the early 1980s. Although strongly correlated with `aids`, `hiv` is a term with higher frequency. Research for `hepatitis b` seems to have kept a constant relative level, growing as much as the total body of research.

------------------------------------------------------------------------
