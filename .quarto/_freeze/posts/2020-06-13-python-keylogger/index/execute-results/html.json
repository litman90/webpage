{
  "hash": "bd7b39d13613975802839fc91838b183",
  "result": {
    "markdown": "---\ntitle: Python Keylogger \ndate: 2020-06-13\ntags: [\"fun\", \"python\"]\nmathjax: true\n---\n\nI have been struggling a lot with pain in my fingers and wrists[^longtime].\n\n[^longtime]: It's 2023 and I still struggle with this. Buy a proper keyboard and pay attention to ergonomics. Physical Therapy helps. Get help. Take care of yourself.\n\nI have tried setting up timers for using the keyboard. \nBut the only thing that seems to work is reducing the typing (aka get away from the computer and stop using the keyboard!).\n\nTracking hours didn't work well, so I guess a last resort to force me is counting the actual number of keys per day and trying to keep that to a minimum.\n\nAfter a little google searching, I found inspiration on this post: [Design a Keylogger in Python](https://www.tutorialspoint.com/design-a-keylogger-in-python). \n\nI wanted something **simple**. Just count and save to file, in case future me wants to do some sort of analysis. Nothing fancy, no optimization. Most importantly something I can trust is not sending every keystroke I write over the internets.\n\n> I will be using pynput library\n\nYou can read the [pynput docs here](https://pynput.readthedocs.io/en/latest/keyboard.html).\n\nOf note, `pip3 install pynput` failed. If only python made it possible for people to install things ... ü§∑\n\nAnyway, mystery aside, `python -m pip install pynput` worked. I kind of trust this library is safe enough (read: *blind faith in open-source*) . And my passwords are kinda there scrambled somewhere in the text file but I don't plan to host the file anywhere so it's reasonably safe (please don't get remote access to my computer üôè).\n\nThe output to console (again, keep it simple) looks like this:\n\n```\nToday is 2020-06-11 and the key count is: 0\n...\nToday is 2020-06-11 and the key count is: 12000\nToday is a brand new day :)\nToday is 2020-06-12 and the key count is: 0\nToday is 2020-06-12 and the key count is: 1000\nToday is 2020-06-12 and the key count is: 2000\n...\nToday is 2020-06-12 and the key count is: 13000\nToday is a brand new day :)\nToday is 2020-06-13 and the key count is: 0\nToday is 2020-06-13 and the key count is: 1000\nToday is 2020-06-13 and the key count is: 2000\n```\n\nFor those of you who want to use it, you can find the code below:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Check the Code\"}\nfrom pynput.keyboard import Key, Listener\nimport logging\nimport os\nimport datetime\n\n# log_dir defaults to Desktop\nlog_dir = '/home/matias/Desktop'\n# updates every 100 keystrokes\nupdate_every = 1000\nday_count = 0\ntoday = datetime.date.today().isoformat()\n   \ndef on_press(key):\n\tlogging.info(str(key))\n\ndef key_count(key):\n\tglobal today, day_count, update_every\n\tif today == datetime.date.today().isoformat():\n\t\tif day_count % update_every == 0:\n\t\t\tprint(f\"Today is {today} and the key count is: {day_count}\")\n\t\t# always update the counter\n\t\tday_count = day_count + 1\n\telse:\n\t\t# update today's value\n\t\ttoday = datetime.date.today().isoformat()\n\t\tprint(\"Today is a brand new day :)\")\n\t\t# reset the counter\n\t\tday_count = 0\n\treturn\n\ndef main():\n\tlogging.basicConfig(filename = (os.path.join(log_dir, \"keylog.txt\")),\n\t level=logging.DEBUG,\n\t format='%(asctime)s: %(message)s')\n\twith Listener(\n\t\ton_press=on_press,\n\t\ton_release=key_count) as listener:\n\t\tlistener.join()\n\nif __name__ == '__main__':\n\tprint(\"Starting keylogger\")\n\tmain()\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}