{"title":"Matlab list_files","markdown":{"yaml":{"title":"Matlab list_files","date":"2018-04-24","tags":["learning","ideas","R","Matlab"]},"headingText":"The solution","containsRefs":false,"markdown":"\n\nMy preferred programing language is R. But, for many purposes, I find myself in need of a Graphical User Interface (GUI). Thus, I experienced a forceful transition to Matlab. Let's be honest, Matlab can do powerful things, and it's a great language to attempt to dominate (note to self: learn Python![^notetoself]). Still, I find myself over and over thinking in `R` mode. Something along the lines of:\n\n[^notetoself]: In 2023, having learned Python, I celebrate that my Matlab days are long over. That being said, I ended up writing an `rlist_files` package for Python due to fighting against `os` and `Path` libraries. You can find it [here](https://github.com/matiasandina/rlist_files).\n\n> Gimme all the files in folder with xyz...\n\nCan be easily accomplished in `R` with `list.files()`\n\n```{r}\n#| label: list-file\n#| eval: false\n#| echo: true\n\nlist.files(...)\n\n```\n\nThis command can handle many many options, with `pattern` being among my favorite. More importantly, this command returns a useful `character` vector. No extra dots, no list of lists, no array. Just, useful. On the other hand, Matlab has `dir` and `ls` both of which are not satisfactory.   \n\n```{octave}\n#| eval: !expr F\n#| echo: true\ndir\n\n.                                                      \n..                                    \nsomething.m                            \nsomething_else.m                               \nLookHere.m\n\n\n```\n\nYes... Matlab's version can also handle some form of regular expression matching. But, mind the dots and the structure! Matlab's `dir` has a ton of things on it.  \n\n```{octave}\n#| eval: !expr F\n#| echo: true\n>> q = dir\n\nq = \n\n  20×1 struct array with fields:\n\n    name\n    folder\n    date\n    bytes\n    isdir\n    datenum\n```\n\nMatlab `ls` function is also full of deadly traps.  \n\n```{octave}\n#| eval: !expr F\n#| echo: true\nqq = ls\n\nqq =\n\n  20×28 char array\n\n    '.                           '\n    '..                          '\n    'many_things_here.ext        '\n\n```\n\n\n\nI found myself fighting for a character vector or array (`nx1`) that I could feed into a function/loop/whatever.  \n\nThus, after many many many times fighting against classes, with functions that expect `char` instead of `string`, or `cell`, or `whatever`, I decided to create something that resembles (at least partially) the functionality I was looking for. It's not perfect. Please enlighten me with a better approach. For now, I will be using `list_files.m`. Wanna use it? Be my guest, see below:\n\n```{octave}\n#| eval: !expr F\n#| echo: true\n#| code-fold: true\n#| code-summary: Show Matlab Code \n\n% The idea of this function is to have something that works to list files\n% Matlab has too many weird things with dir/patterns/etc...\n% It could be slow if calling in a BIG dir and then subsetting\n% Otherwise it should work pretty fast\n\nfunction filenames = list_files(varargin)\n\n% Open input parser\np = inputParser();\n\n% Add possible values\naddOptional(p, 'Interactive', true, @islogical)\naddOptional(p, 'Dirname', '0', @ischar)\naddOptional(p, 'Pattern', {'.'}, @iscell)\naddOptional(p, 'FullPath', false, @islogical)\n\n\n% parse\nparse(p, varargin{:});\n\n% retrieve things from parser\nInteractive = p.Results.Interactive;\nDirname = p.Results.Dirname;\nPattern = p.Results.Pattern;\nFullPath = p.Results.FullPath;\n\n\n%% Dirname goes first\n% If we didn't provide a Dirname, both defaults will hold\n% If we provided a Dirname, we will read from there\n\nif (Interactive && string(Dirname) == '0')\n\n    dirname = uigetdir();\n\nelse\n    \n    dirname = Dirname;\n    \nend\n\n\nif ~isdir(dirname)\n    error('Dirname not valid, check dirname provided is character and exists.')\nend\n\n% actually call dir\n    d=dir(dirname);\n% Remove the dots matlab puts to things\n    d=d(~ismember({d.name},{'.','..'}));\n\n    % Get filenames\n    % Output as an mx1 cell\n    \n    filenames = {d.name}';\n\n        \n%% Subset by pattern\n    \n    default_pattern = string(Pattern) == '.';\n\n    if (~default_pattern) % non default case\n    \n    % join cell patterns separated by the 'or' regular expression\n    query_expression = strjoin(Pattern, '|');\n    \n    %  Subset the patterns\n    filenames = filenames(~cellfun(@isempty,regexp(filenames, query_expression)));\n    end\n    \n    % By default we return just the name\n    % If you want the full path, call it!\n    % it currently works only for 1 folder\n    % Recursive = TRUE will be super nice!\n    \n    if FullPath\n    filenames = fullfile(unique({d.folder}), filenames);\n    end\nend\n\n```\n\n","srcMarkdownNoYaml":"\n\nMy preferred programing language is R. But, for many purposes, I find myself in need of a Graphical User Interface (GUI). Thus, I experienced a forceful transition to Matlab. Let's be honest, Matlab can do powerful things, and it's a great language to attempt to dominate (note to self: learn Python![^notetoself]). Still, I find myself over and over thinking in `R` mode. Something along the lines of:\n\n[^notetoself]: In 2023, having learned Python, I celebrate that my Matlab days are long over. That being said, I ended up writing an `rlist_files` package for Python due to fighting against `os` and `Path` libraries. You can find it [here](https://github.com/matiasandina/rlist_files).\n\n> Gimme all the files in folder with xyz...\n\nCan be easily accomplished in `R` with `list.files()`\n\n```{r}\n#| label: list-file\n#| eval: false\n#| echo: true\n\nlist.files(...)\n\n```\n\nThis command can handle many many options, with `pattern` being among my favorite. More importantly, this command returns a useful `character` vector. No extra dots, no list of lists, no array. Just, useful. On the other hand, Matlab has `dir` and `ls` both of which are not satisfactory.   \n\n```{octave}\n#| eval: !expr F\n#| echo: true\ndir\n\n.                                                      \n..                                    \nsomething.m                            \nsomething_else.m                               \nLookHere.m\n\n\n```\n\nYes... Matlab's version can also handle some form of regular expression matching. But, mind the dots and the structure! Matlab's `dir` has a ton of things on it.  \n\n```{octave}\n#| eval: !expr F\n#| echo: true\n>> q = dir\n\nq = \n\n  20×1 struct array with fields:\n\n    name\n    folder\n    date\n    bytes\n    isdir\n    datenum\n```\n\nMatlab `ls` function is also full of deadly traps.  \n\n```{octave}\n#| eval: !expr F\n#| echo: true\nqq = ls\n\nqq =\n\n  20×28 char array\n\n    '.                           '\n    '..                          '\n    'many_things_here.ext        '\n\n```\n\n\n## The solution\n\nI found myself fighting for a character vector or array (`nx1`) that I could feed into a function/loop/whatever.  \n\nThus, after many many many times fighting against classes, with functions that expect `char` instead of `string`, or `cell`, or `whatever`, I decided to create something that resembles (at least partially) the functionality I was looking for. It's not perfect. Please enlighten me with a better approach. For now, I will be using `list_files.m`. Wanna use it? Be my guest, see below:\n\n```{octave}\n#| eval: !expr F\n#| echo: true\n#| code-fold: true\n#| code-summary: Show Matlab Code \n\n% The idea of this function is to have something that works to list files\n% Matlab has too many weird things with dir/patterns/etc...\n% It could be slow if calling in a BIG dir and then subsetting\n% Otherwise it should work pretty fast\n\nfunction filenames = list_files(varargin)\n\n% Open input parser\np = inputParser();\n\n% Add possible values\naddOptional(p, 'Interactive', true, @islogical)\naddOptional(p, 'Dirname', '0', @ischar)\naddOptional(p, 'Pattern', {'.'}, @iscell)\naddOptional(p, 'FullPath', false, @islogical)\n\n\n% parse\nparse(p, varargin{:});\n\n% retrieve things from parser\nInteractive = p.Results.Interactive;\nDirname = p.Results.Dirname;\nPattern = p.Results.Pattern;\nFullPath = p.Results.FullPath;\n\n\n%% Dirname goes first\n% If we didn't provide a Dirname, both defaults will hold\n% If we provided a Dirname, we will read from there\n\nif (Interactive && string(Dirname) == '0')\n\n    dirname = uigetdir();\n\nelse\n    \n    dirname = Dirname;\n    \nend\n\n\nif ~isdir(dirname)\n    error('Dirname not valid, check dirname provided is character and exists.')\nend\n\n% actually call dir\n    d=dir(dirname);\n% Remove the dots matlab puts to things\n    d=d(~ismember({d.name},{'.','..'}));\n\n    % Get filenames\n    % Output as an mx1 cell\n    \n    filenames = {d.name}';\n\n        \n%% Subset by pattern\n    \n    default_pattern = string(Pattern) == '.';\n\n    if (~default_pattern) % non default case\n    \n    % join cell patterns separated by the 'or' regular expression\n    query_expression = strjoin(Pattern, '|');\n    \n    %  Subset the patterns\n    filenames = filenames(~cellfun(@isempty,regexp(filenames, query_expression)));\n    end\n    \n    % By default we return just the name\n    % If you want the full path, call it!\n    % it currently works only for 1 folder\n    % Recursive = TRUE will be super nice!\n    \n    if FullPath\n    filenames = fullfile(unique({d.folder}), filenames);\n    end\nend\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"filters":["social-embeds","social-share"],"include-after-body":["../../footer.html"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","editor":"visual","comments":{"utterances":{"repo":"matiasandina/Webpage","label":"Comment","theme":"github-dark"}},"theme":{"light":"cosmo","dark":"cosmo"},"code-copy":true,"title-block-banner":true,"license":"CC BY","toc-title":"Table of contents","toc-location":"right","author":[{"name":"Matias Andina","url":"https://matiasandina.netlify.app","affiliation":"Massachusetts Institute of Technology","orcid":"0000-0002-1996-2539"}],"citation":true,"share":{"permalink":"https://matiasandina.netlify.app/","description":"Matias Andina","twitter":true,"facebook":true,"reddit":true,"stumble":true,"tumblr":false,"linkedin":true,"email":true,"mastodon":true},"title":"Matlab list_files","date":"2018-04-24","tags":["learning","ideas","R","Matlab"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}