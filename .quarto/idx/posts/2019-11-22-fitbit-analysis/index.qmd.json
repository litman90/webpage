{"title":"Fitbit Analysis","markdown":{"yaml":{"title":"Fitbit Analysis","date":"2019-11-22","categories":["tracking","learning","R"]},"headingText":"Density plots","containsRefs":false,"markdown":"\n\nIt's been a bit more than a year since I got a fitbit and I have been pretty excited about tracking my activity and heart rate. I should say I'm quite surprised about the sleep data. Tracking sleep has been, in fact, the most exciting feature, and I now strive to get at least 7 hours of sleep per night.\n\n\n\n```{r}\n#| label: setup\n#| include: false\n#| results: hide\n#| warning: false\n#| message: false\n\nknitr::opts_chunk$set(echo = FALSE, comment = NA, warning = FALSE)\nset.seed(12345)\nlibrary(tidyverse)\n```\n\n```{r}\n#| label: read-data\n#| cache: true\n#| warning: false\n#| message: false\n#| results: hide\n\ndf <- readr::read_csv(\"UNPUBLISHED_heart_steps.csv\")\n\n\n```\n\nLet's first see a glimpse of the data, just to know what type of data we are dealing with. \n\n```{r}\n#| cache: true\ndf %>% \n  slice(1:5)\n```\n\n\nLet's now inspect the overall distribution for heart rate and step values.\n\n```{r}\n#| cache: true\n#| warning: false\n\ndens <- ggplot(df, aes(value)) +\n          geom_density(fill = \"gray75\") +\n          facet_wrap(~variable,\n                     scales = \"free\")\n\n# Data for text\ntext_data <- data.frame(\n  variable = sort(rep(c(\"heart_rate\", \"steps\"), 3)),\n  value = c(70, 80, 120, 30, 30, 110),\n  y = c(0.04, 0.03, 0.01, 0.22, 0.03, 0.03),\n  label = c(\"sleep\", \"sitting\", \"walking\", \n            \"sleep/sitting\", \"coffee break?\", \"walk/run\")\n)\n\n\ndens +\n  geom_label(data = text_data,\n            aes(x = value, y = y, label = label))+\n  labs(x = \"value per minute\", y=\"density\")\n```\n\n\n```{r}\n#| label: subset-data\n# get the steps\nsteps <- filter(df, variable == \"steps\")\n# get the heart\nheart <- filter(df, variable == \"heart_rate\")\n\n# Helper function\nget_time <- function(x){hms::as_hms(format(x, \"%H:%M:%S\"))}\n\nheart <- mutate(heart,\n                  dataset_time = get_time(date_time),\n                  dateTime = lubridate::ymd(format(date_time, \"%Y-%m-%d\")))\n\n\n```\n\n## When do I move?\n\nI will start by focusing on the data for steps.\n\nI'm curious to see what times of the day have the most activity. Because I have a quite large amount of data points (~`r paste(round(nrow(steps)/1000), \"K\")`) I will use `geom_hex()` to count for me and simplify rendering[^searching].\n\n[^searching]: I had been searching for excuses to use this function for a while. Check it out [here](https://ggplot2.tidyverse.org/reference/geom_hex.html)\n\n```{r}\n#| label: steps-1\n#| cache: true\n#| warning: false\n\n# create a custom x scale\nmy_hour_scale <-   scale_x_continuous(\n    # x is in seconds\n    breaks = seq(0, 24 * 3600, 3 * 3600),\n    labels = paste0(\n      str_pad(seq(0, 24, 3), width = 2, pad = 0),\n      \":00\"))\n\n\nggplot(steps,\n       aes(dataset_time, value))+\n  geom_hex(color=\"black\")+\n  scale_fill_viridis_c(limits = c(0, 25000),\n                       labels = scales::unit_format(unit = \"K\", scale = 1e-3),\n                       guide = guide_legend(label.hjust = 1)) +\n  my_hour_scale +\n  theme_bw() +\n  theme(legend.position = \"bottom\") +\n  labs(y=\"Number of Steps\", \n       x=\"\",\n       title = \"Number of steps vs time of the day\",\n       subtitle = \"Each hexagon represents the number of steps at a time.\\nThe fill indicates the amount of times this combination is found in the data.\",\n       caption=\"@NeuroMLA\")\n```\n\nWell, I should have remembered that for the vast majority of minutes (regardless of the hour of the day), the count is exactly zero. Let's only look at the positive counts:\n\n```{r}\n#| label: steps-2\n#| cache: true\n\nggplot(filter(steps, value > 0), \n       aes(dataset_time, value))+\n  geom_hex(color=\"black\")+\n  scale_fill_viridis_c(#labels = scales::unit_format(unit = \"K\", scale = 1e-2),\n                       guide = guide_legend(label.hjust = 1)) +\n  my_hour_scale +\n  theme_bw() +\n  theme(legend.position = \"bottom\") +\n  labs(y=\"Number of Steps\", \n       x=\"\",\n       title = \"Number of steps vs time of the day\",\n       subtitle = \"Each hexagon represents the number of steps at a time.\\nThe fill indicates the amount of times this combination is found in the data.\\nOnly including minutes with steps greater than zero. \",\n       caption=\"@NeuroMLA\")\n\n\n```\n\nWe see now some patches that have high activity (> 100 steps), particularly around 9:00, 12:00 and 18:00. These mostly correspond to \"going to work\", \"activity around lunch time (?)\", and \"going home / physical activity\". For all other cases, it looks like I move around 10-20 steps per minute, regardless of the minute within the hour.\n\n\n### Last 10 minutes\n\nThe result above is interesting because I usually have to be reminded by Fitbit to \"move up to 250 steps in the hour\". I receive this notification during the last 10 minutes of the hour and I would think that during those 10 minutes I put more steps than during the first 50. The data show I'm wrong:\n\n```{r}\n#| label: last-10-plot\n\nsteps %>%\n  filter(value > 0) %>%\n  mutate(stage = ifelse(\n    str_detect(dataset_time, \":5[0-9]\"),\n    \"last-10\", \"first-50\")) %>%\n    ggplot(aes(value))+\n    geom_density(aes(fill = stage), alpha = 0.8)+\n  paletteer::scale_fill_paletteer_d(\"awtools::mpalette\") +\n    labs(y=\"Density\", \n       x=\"Number of Steps\",\n       title=\"The 'move' reminder does not make me walk more\",\n       caption=\"@NeuroMLA\")\n  \n\n```\n\nThat being said, I want to keep my reminder on. I feel like having it turned on definitely adds ~ 1000-2000 steps per day.\n\n### Daily average\n\nLet's get one level above and aggregate each day as a unit. This plot shows a nice trend, with months from May to August showing an increase on the number of steps. Keep in mind that November will show little average steps because for that month we have incomplete data (last day in database is `r steps %>% pull(dateTime) %>% last()`),  \n\n```{r}\n#| label: steps-3\n#| cache: true\n#| warning: false\n#| message: false\ndaily_steps <- steps %>% group_by(dateTime) %>%\n         summarise(total_value = unique(total_value))\n\nggplot(daily_steps,\n       aes(dateTime, total_value))+\n  geom_smooth(method = \"loess\", color =\"black\")+\n  scale_y_continuous(labels = scales::label_number_si())+\n  labs(y=\"Daily Number of Steps\", \n       x=\"\",\n       title=\"Daily step average by date\",\n       caption=\"@NeuroMLA\")+\n  scale_x_date(breaks=\"3 months\",\n               date_labels = \"%b-%Y\")\n  \n\n```\n\nAt this part of the analysis, I should make clear that I took vacations from `2019-06-27` to `2019-07-11`. We will use this information in the analysis to make some things clear.\n\n```{r}\n#| label: vacations\n# make vector\nvacations <- seq(from = as.Date(\"2019-06-27\"), to = as.Date(\"2019-07-11\"), by = \"1 day\")\n# add it to daily_steps\ndaily_steps <- mutate(daily_steps, vacations = dateTime %in% vacations)\n# Since we are here, let's add the weekdays\n\ndaily_steps <- daily_steps %>%\n         mutate(wday = lubridate::wday(dateTime, week_start = 1, label=TRUE))\n\n\n```\n\n\n## Distribution\n\nWe looked at the average daily steps for each month, how about the distribution of daily steps? We see that most days I come quite close to the default target of 10K steps. There are some days with very little steps (see below) and, obviously, some days with extreme number of steps.\n\n```{r}\n#| label: typical-events\n\ndaily_steps %>%\n  ggplot(aes(total_value))+\n  geom_density(fill=\"gray50\")+\n  geom_vline(xintercept =\n               c(median(daily_steps$total_value),\n                        10000),\n                            lty=2)+\n  annotate(\"text\", x = 10300, y = 5 * 10^-5,\n           label = \"Target 10K\",\n           angle = 90, color = \"white\")+\n  annotate(\"text\",\n           x = median(daily_steps$total_value) - 400,\n           y = 5 * 10^-5,\n           label = paste0(\"median: \",\n                      median(daily_steps$total_value)),\n           color = \"white\", angle = 90)+\n scale_y_continuous(\n    labels = scales::label_scientific()) +\n  scale_x_continuous(\n    labels = scales::label_number(\n      scale_cut = scales::cut_short_scale())) + \n  labs(x=\"Total number of steps in a day\",\n       y=\"Density\")\n  \n```\n\n## Extreme events\n\nUsing the boxplot below, we can define *extreme events* as instances where I walked more than 20K steps. I chose to plot this by day of the week, to get an insight about periodicity of events.\n\n```{r}\nbox_plot <- ggplot(daily_steps,\n       aes(wday, total_value, group=wday))+\n  geom_boxplot()+\n  theme_bw()+\n  labs(title=\"Total steps by day of the week\",\n       y=\"Total steps in a day\",\n       x=\"\") +\n    scale_y_continuous(\n    labels = scales::label_number(\n      scale_cut = scales::cut_short_scale()))\n\nbox_plot\n```\n\nBecause I walked a lot during the vacations, I highlighted the days on top of the previous boxplot. Most of the extreme events are definitely during the vacations. Moreover, none of the days I walked less than 10K steps, pretty amazing!\n\n```{r}\n#| label: vacations-2\n\nbox_plot + geom_point(data = filter(daily_steps, vacations == TRUE),\n                      aes(wday, total_value),\n                      color = \"red\")+\n  labs(subtitle=\"Points colored in red highlight vacations.\")\n\n```\n\n\nThere are some extreme *low* events, these are quite likely the days I just don't wear the fitbit (or days I forget to wear it for most of the day). Just because I can order the data and make another plot, I went ahead and did it!\n\n\n```{r}\n#| label: arranged-steps\n\narranged_steps <- daily_steps %>%\n  arrange(desc(total_value)) \n\narranged_steps <- arranged_steps %>%\n  mutate(step_order = 1:nrow(arranged_steps))\n  \n# get the below 1000 days\nbelow_1000 <- arranged_steps %>% filter(total_value < 1000)\n\nabove_20K <- arranged_steps %>% filter(total_value > 20000)\n\nggplot(arranged_steps, \n       aes(step_order,\n           total_value)) +\n  geom_hline(yintercept = median(daily_steps$total_value), lty=2) +\n  ggforce::geom_mark_rect(data = below_1000, description = 'Fitbit at home',\n                          radius = unit(2.5, 'mm'),\n                          expand = unit(6, \"mm\"),\n                          color=\"red\", \n                          label.colour = \"red\",\n                          con.colour = \"red\", con.type = \"straight\") +\n  ggforce::geom_mark_rect(data = above_20K, description = 'Vacations',\n                          radius = unit(2.5, 'mm'),\n                          expand = unit(2.5, \"mm\"),\n                          color=\"red\", \n                          label.colour = \"red\",\n                          con.colour = \"red\", con.type = \"straight\") +\n  geom_point(alpha = 0.5) +\n  geom_point(data = filter(above_20K, vacations == TRUE),\n                           aes(step_order, total_value), color=\"red\") +\n  geom_point(data = below_1000,\n                           aes(step_order, total_value), color=\"red\") +\n  theme_bw() +\n  scale_y_continuous(breaks = c(0, 10^4, 2*10^4, 3*10^4),\n                     labels = c(\"0\", \"10K\", \"20K\", \"30K\")) +\n  labs(x = \"Ranking\",\n       y = \"Total daily steps\",\n       title = \"Step distribution\",\n       subtitle = \"Horizontal line is the median.\",\n       caption = \"@NeuroMLA\")\n\n\n```\n\n\nWe usually go for walks on Saturdays and/or Sundays. Knowing this little piece of data, it's quite expected to see Saturdays being the days with higher number of steps (and hence higher success rate on the 10K target). \n\n\n```{r}\ndaily_steps %>%\n         mutate(wday = lubridate::wday(dateTime, week_start = 1, label=TRUE),\n                goal = ifelse(total_value > 10000,\n                              \"10K+\", \"<10K\")) %>%\n  ggplot(aes(x=wday, fill=goal))+\n  geom_bar(position = \"fill\") +\n  scale_y_continuous(labels = scales::percent,\n                     expand = expansion(add = c(0, 0.05)))+\n  coord_flip()+\n  scale_fill_brewer(palette = \"Set1\",\n                    guide = guide_legend(reverse = TRUE))+\n  theme_minimal() +\n  theme(legend.position = \"bottom\", panel.grid = element_blank())+\n  labs(fill=\"10K steps?\", \n       x=\"\", y=\"Days with 10K achievement (%)\")\n```\n\n## Season\n\nI want to turn the focus now to the seasonality of the data. I will use a helper function `getSeason()` that I took from [StackOverflow](https://stackoverflow.com/questions/9500114/find-which-season-a-particular-date-belongs-to).\n\n```{r}\n#| label: helper\n#| echo: false\n\n# from here\n# https://stackoverflow.com/questions/9500114/find-which-season-a-particular-date-belongs-to\n\ngetSeason <- function(DATES) {\n    WS <- as.Date(\"2012-12-15\", format = \"%Y-%m-%d\") # Winter Solstice\n    SE <- as.Date(\"2012-3-15\",  format = \"%Y-%m-%d\") # Spring Equinox\n    SS <- as.Date(\"2012-6-15\",  format = \"%Y-%m-%d\") # Summer Solstice\n    FE <- as.Date(\"2012-9-15\",  format = \"%Y-%m-%d\") # Fall Equinox\n\n    # Convert dates from any year to 2012 dates\n    d <- as.Date(strftime(DATES, format=\"2012-%m-%d\"))\n\n    ifelse (d >= WS | d < SE, \"Winter\",\n      ifelse (d >= SE & d < SS, \"Spring\",\n        ifelse (d >= SS & d < FE, \"Summer\", \"Fall\")))\n}\n\n```\n\nWe can inspect the effect of season on my walking.\n\n```{r}\n\n# levels = c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")\nseason_colors <- c(\"#5EADBF\", \"#A60311\", \"#A67D03\", \"#3C1A2F\") \n\ndaily_steps %>%\n  mutate(season = factor(getSeason(dateTime), levels = c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")),\n         year = lubridate::year(dateTime)) %>%\n  ggplot(aes(dateTime, total_value))+\n  geom_point(aes(color=season))+\n  scale_y_continuous(breaks = c(0, 10^4, 2*10^4, 3*10^4),\n                     labels = scales::unit_format(unit = \"K\", sep = \"\", scale = 10^-3)) +\n  theme_bw() +\n  labs(y=\"Daily Number of Steps\", \n       x=\"\",\n       title=\"Daily number of steps by date\",\n       caption=\"@NeuroMLA\")+\n  scale_x_date(#breaks=\"3 months\",\n               date_labels = \"%Y-%b\") +\n  theme(legend.position = \"bottom\") +\n  scale_color_manual(values = season_colors)\n# facet_grid does not really help\n# facet_grid(year ~ season)+\n\n```\n\n\nThe plot above is not good, it fails to communicate. I think this is a better way to show the data. \n\n```{r}\n# levels = c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")\nseason_colors <- c(\"#5EADBF\", \"#A60311\", \"#A67D03\", \"#3C1A2F\") \n\ndaily_steps %>%\n  mutate(season = factor(getSeason(dateTime), levels = c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")),\n         year = lubridate::year(dateTime)) %>%\n  ggplot(aes(season, total_value, color = season)) +\n  ggbeeswarm::geom_quasirandom(show.legend = FALSE) +\n  scale_color_manual(values = season_colors) +\n  scale_y_continuous(breaks = c(0, 10^4, 2*10^4, 3*10^4),\n                   labels = scales::unit_format(unit = \"K\", sep = \"\", scale = 10^-3)) +\n  theme_bw() +\n  labs(y=\"Daily Number of Steps\", \n       x=\"\",\n       title=\"Daily number of steps by date\",\n       caption=\"@NeuroMLA\")\n```\n\n\n## A year's heart rate in one plot\n\nI'm borrowing **heavily** from [Nick](https://livefreeordichotomize.com/2017/12/27/a-year-as-told-by-fitbit/) here. But I thought it was a brilliant plot, so I took it for a ride with my data. I actually changed a few things, I decided to keep the native sampling rate and use `geom_line()` instead of down-sampling and using `geom_tile()`. The overall trend is clear, movements during the morning and the afternoon that correlate well with going and coming back from work. Somewhere around July 2019 you can see the change in timezone when I took vacations. There are a couple of days in late May with continuously high or lacking values, I take this as one of the days I forgot the fitbit at home, likely spurious measures. \n\n```{r}\n#| label: hear-rate\n#| eval: false\n\nheart %>%\n    ggplot(aes(dataset_time, dateTime, color = value)) +\n  # geom_point(pch=\"|\")+\n    geom_line(aes(group = dateTime)) +\n    my_hour_scale +\n   scale_y_date(date_labels = \"%Y-%b\", expand = c(0, 0)) +\n   scale_color_gradientn(guide = \"legend\", colours = RColorBrewer::brewer.pal(n = 9, name = \"Oranges\")) +\n    theme_minimal() +\n    theme(\n      legend.position = \"bottom\",\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank()\n    )+\n    labs(y=\"\", \n       x=\"\",\n       title = \"Heart Rate\",\n       subtitle = \"Each row represents one day.\",\n       caption=\"@NeuroMLA\")-> heart_plot\n\n#ggsave(plot = heart_plot, \"heart_plot.png\")\n```\n\n![](heart_plot.png)\n\n## Code\n\nThe code for this post is quite long and I thought it would get in the way. I am happy to share upon request, hit me up on [Twitter](https://twitter.com/NeuroMLA) or in the comments below.\n\n## Sources\n\n* https://livefreeordichotomize.com/2017/12/27/a-year-as-told-by-fitbit/\n","srcMarkdownNoYaml":"\n\nIt's been a bit more than a year since I got a fitbit and I have been pretty excited about tracking my activity and heart rate. I should say I'm quite surprised about the sleep data. Tracking sleep has been, in fact, the most exciting feature, and I now strive to get at least 7 hours of sleep per night.\n\n\n\n```{r}\n#| label: setup\n#| include: false\n#| results: hide\n#| warning: false\n#| message: false\n\nknitr::opts_chunk$set(echo = FALSE, comment = NA, warning = FALSE)\nset.seed(12345)\nlibrary(tidyverse)\n```\n\n```{r}\n#| label: read-data\n#| cache: true\n#| warning: false\n#| message: false\n#| results: hide\n\ndf <- readr::read_csv(\"UNPUBLISHED_heart_steps.csv\")\n\n\n```\n\nLet's first see a glimpse of the data, just to know what type of data we are dealing with. \n\n```{r}\n#| cache: true\ndf %>% \n  slice(1:5)\n```\n\n## Density plots\n\nLet's now inspect the overall distribution for heart rate and step values.\n\n```{r}\n#| cache: true\n#| warning: false\n\ndens <- ggplot(df, aes(value)) +\n          geom_density(fill = \"gray75\") +\n          facet_wrap(~variable,\n                     scales = \"free\")\n\n# Data for text\ntext_data <- data.frame(\n  variable = sort(rep(c(\"heart_rate\", \"steps\"), 3)),\n  value = c(70, 80, 120, 30, 30, 110),\n  y = c(0.04, 0.03, 0.01, 0.22, 0.03, 0.03),\n  label = c(\"sleep\", \"sitting\", \"walking\", \n            \"sleep/sitting\", \"coffee break?\", \"walk/run\")\n)\n\n\ndens +\n  geom_label(data = text_data,\n            aes(x = value, y = y, label = label))+\n  labs(x = \"value per minute\", y=\"density\")\n```\n\n\n```{r}\n#| label: subset-data\n# get the steps\nsteps <- filter(df, variable == \"steps\")\n# get the heart\nheart <- filter(df, variable == \"heart_rate\")\n\n# Helper function\nget_time <- function(x){hms::as_hms(format(x, \"%H:%M:%S\"))}\n\nheart <- mutate(heart,\n                  dataset_time = get_time(date_time),\n                  dateTime = lubridate::ymd(format(date_time, \"%Y-%m-%d\")))\n\n\n```\n\n## When do I move?\n\nI will start by focusing on the data for steps.\n\nI'm curious to see what times of the day have the most activity. Because I have a quite large amount of data points (~`r paste(round(nrow(steps)/1000), \"K\")`) I will use `geom_hex()` to count for me and simplify rendering[^searching].\n\n[^searching]: I had been searching for excuses to use this function for a while. Check it out [here](https://ggplot2.tidyverse.org/reference/geom_hex.html)\n\n```{r}\n#| label: steps-1\n#| cache: true\n#| warning: false\n\n# create a custom x scale\nmy_hour_scale <-   scale_x_continuous(\n    # x is in seconds\n    breaks = seq(0, 24 * 3600, 3 * 3600),\n    labels = paste0(\n      str_pad(seq(0, 24, 3), width = 2, pad = 0),\n      \":00\"))\n\n\nggplot(steps,\n       aes(dataset_time, value))+\n  geom_hex(color=\"black\")+\n  scale_fill_viridis_c(limits = c(0, 25000),\n                       labels = scales::unit_format(unit = \"K\", scale = 1e-3),\n                       guide = guide_legend(label.hjust = 1)) +\n  my_hour_scale +\n  theme_bw() +\n  theme(legend.position = \"bottom\") +\n  labs(y=\"Number of Steps\", \n       x=\"\",\n       title = \"Number of steps vs time of the day\",\n       subtitle = \"Each hexagon represents the number of steps at a time.\\nThe fill indicates the amount of times this combination is found in the data.\",\n       caption=\"@NeuroMLA\")\n```\n\nWell, I should have remembered that for the vast majority of minutes (regardless of the hour of the day), the count is exactly zero. Let's only look at the positive counts:\n\n```{r}\n#| label: steps-2\n#| cache: true\n\nggplot(filter(steps, value > 0), \n       aes(dataset_time, value))+\n  geom_hex(color=\"black\")+\n  scale_fill_viridis_c(#labels = scales::unit_format(unit = \"K\", scale = 1e-2),\n                       guide = guide_legend(label.hjust = 1)) +\n  my_hour_scale +\n  theme_bw() +\n  theme(legend.position = \"bottom\") +\n  labs(y=\"Number of Steps\", \n       x=\"\",\n       title = \"Number of steps vs time of the day\",\n       subtitle = \"Each hexagon represents the number of steps at a time.\\nThe fill indicates the amount of times this combination is found in the data.\\nOnly including minutes with steps greater than zero. \",\n       caption=\"@NeuroMLA\")\n\n\n```\n\nWe see now some patches that have high activity (> 100 steps), particularly around 9:00, 12:00 and 18:00. These mostly correspond to \"going to work\", \"activity around lunch time (?)\", and \"going home / physical activity\". For all other cases, it looks like I move around 10-20 steps per minute, regardless of the minute within the hour.\n\n\n### Last 10 minutes\n\nThe result above is interesting because I usually have to be reminded by Fitbit to \"move up to 250 steps in the hour\". I receive this notification during the last 10 minutes of the hour and I would think that during those 10 minutes I put more steps than during the first 50. The data show I'm wrong:\n\n```{r}\n#| label: last-10-plot\n\nsteps %>%\n  filter(value > 0) %>%\n  mutate(stage = ifelse(\n    str_detect(dataset_time, \":5[0-9]\"),\n    \"last-10\", \"first-50\")) %>%\n    ggplot(aes(value))+\n    geom_density(aes(fill = stage), alpha = 0.8)+\n  paletteer::scale_fill_paletteer_d(\"awtools::mpalette\") +\n    labs(y=\"Density\", \n       x=\"Number of Steps\",\n       title=\"The 'move' reminder does not make me walk more\",\n       caption=\"@NeuroMLA\")\n  \n\n```\n\nThat being said, I want to keep my reminder on. I feel like having it turned on definitely adds ~ 1000-2000 steps per day.\n\n### Daily average\n\nLet's get one level above and aggregate each day as a unit. This plot shows a nice trend, with months from May to August showing an increase on the number of steps. Keep in mind that November will show little average steps because for that month we have incomplete data (last day in database is `r steps %>% pull(dateTime) %>% last()`),  \n\n```{r}\n#| label: steps-3\n#| cache: true\n#| warning: false\n#| message: false\ndaily_steps <- steps %>% group_by(dateTime) %>%\n         summarise(total_value = unique(total_value))\n\nggplot(daily_steps,\n       aes(dateTime, total_value))+\n  geom_smooth(method = \"loess\", color =\"black\")+\n  scale_y_continuous(labels = scales::label_number_si())+\n  labs(y=\"Daily Number of Steps\", \n       x=\"\",\n       title=\"Daily step average by date\",\n       caption=\"@NeuroMLA\")+\n  scale_x_date(breaks=\"3 months\",\n               date_labels = \"%b-%Y\")\n  \n\n```\n\nAt this part of the analysis, I should make clear that I took vacations from `2019-06-27` to `2019-07-11`. We will use this information in the analysis to make some things clear.\n\n```{r}\n#| label: vacations\n# make vector\nvacations <- seq(from = as.Date(\"2019-06-27\"), to = as.Date(\"2019-07-11\"), by = \"1 day\")\n# add it to daily_steps\ndaily_steps <- mutate(daily_steps, vacations = dateTime %in% vacations)\n# Since we are here, let's add the weekdays\n\ndaily_steps <- daily_steps %>%\n         mutate(wday = lubridate::wday(dateTime, week_start = 1, label=TRUE))\n\n\n```\n\n\n## Distribution\n\nWe looked at the average daily steps for each month, how about the distribution of daily steps? We see that most days I come quite close to the default target of 10K steps. There are some days with very little steps (see below) and, obviously, some days with extreme number of steps.\n\n```{r}\n#| label: typical-events\n\ndaily_steps %>%\n  ggplot(aes(total_value))+\n  geom_density(fill=\"gray50\")+\n  geom_vline(xintercept =\n               c(median(daily_steps$total_value),\n                        10000),\n                            lty=2)+\n  annotate(\"text\", x = 10300, y = 5 * 10^-5,\n           label = \"Target 10K\",\n           angle = 90, color = \"white\")+\n  annotate(\"text\",\n           x = median(daily_steps$total_value) - 400,\n           y = 5 * 10^-5,\n           label = paste0(\"median: \",\n                      median(daily_steps$total_value)),\n           color = \"white\", angle = 90)+\n scale_y_continuous(\n    labels = scales::label_scientific()) +\n  scale_x_continuous(\n    labels = scales::label_number(\n      scale_cut = scales::cut_short_scale())) + \n  labs(x=\"Total number of steps in a day\",\n       y=\"Density\")\n  \n```\n\n## Extreme events\n\nUsing the boxplot below, we can define *extreme events* as instances where I walked more than 20K steps. I chose to plot this by day of the week, to get an insight about periodicity of events.\n\n```{r}\nbox_plot <- ggplot(daily_steps,\n       aes(wday, total_value, group=wday))+\n  geom_boxplot()+\n  theme_bw()+\n  labs(title=\"Total steps by day of the week\",\n       y=\"Total steps in a day\",\n       x=\"\") +\n    scale_y_continuous(\n    labels = scales::label_number(\n      scale_cut = scales::cut_short_scale()))\n\nbox_plot\n```\n\nBecause I walked a lot during the vacations, I highlighted the days on top of the previous boxplot. Most of the extreme events are definitely during the vacations. Moreover, none of the days I walked less than 10K steps, pretty amazing!\n\n```{r}\n#| label: vacations-2\n\nbox_plot + geom_point(data = filter(daily_steps, vacations == TRUE),\n                      aes(wday, total_value),\n                      color = \"red\")+\n  labs(subtitle=\"Points colored in red highlight vacations.\")\n\n```\n\n\nThere are some extreme *low* events, these are quite likely the days I just don't wear the fitbit (or days I forget to wear it for most of the day). Just because I can order the data and make another plot, I went ahead and did it!\n\n\n```{r}\n#| label: arranged-steps\n\narranged_steps <- daily_steps %>%\n  arrange(desc(total_value)) \n\narranged_steps <- arranged_steps %>%\n  mutate(step_order = 1:nrow(arranged_steps))\n  \n# get the below 1000 days\nbelow_1000 <- arranged_steps %>% filter(total_value < 1000)\n\nabove_20K <- arranged_steps %>% filter(total_value > 20000)\n\nggplot(arranged_steps, \n       aes(step_order,\n           total_value)) +\n  geom_hline(yintercept = median(daily_steps$total_value), lty=2) +\n  ggforce::geom_mark_rect(data = below_1000, description = 'Fitbit at home',\n                          radius = unit(2.5, 'mm'),\n                          expand = unit(6, \"mm\"),\n                          color=\"red\", \n                          label.colour = \"red\",\n                          con.colour = \"red\", con.type = \"straight\") +\n  ggforce::geom_mark_rect(data = above_20K, description = 'Vacations',\n                          radius = unit(2.5, 'mm'),\n                          expand = unit(2.5, \"mm\"),\n                          color=\"red\", \n                          label.colour = \"red\",\n                          con.colour = \"red\", con.type = \"straight\") +\n  geom_point(alpha = 0.5) +\n  geom_point(data = filter(above_20K, vacations == TRUE),\n                           aes(step_order, total_value), color=\"red\") +\n  geom_point(data = below_1000,\n                           aes(step_order, total_value), color=\"red\") +\n  theme_bw() +\n  scale_y_continuous(breaks = c(0, 10^4, 2*10^4, 3*10^4),\n                     labels = c(\"0\", \"10K\", \"20K\", \"30K\")) +\n  labs(x = \"Ranking\",\n       y = \"Total daily steps\",\n       title = \"Step distribution\",\n       subtitle = \"Horizontal line is the median.\",\n       caption = \"@NeuroMLA\")\n\n\n```\n\n\nWe usually go for walks on Saturdays and/or Sundays. Knowing this little piece of data, it's quite expected to see Saturdays being the days with higher number of steps (and hence higher success rate on the 10K target). \n\n\n```{r}\ndaily_steps %>%\n         mutate(wday = lubridate::wday(dateTime, week_start = 1, label=TRUE),\n                goal = ifelse(total_value > 10000,\n                              \"10K+\", \"<10K\")) %>%\n  ggplot(aes(x=wday, fill=goal))+\n  geom_bar(position = \"fill\") +\n  scale_y_continuous(labels = scales::percent,\n                     expand = expansion(add = c(0, 0.05)))+\n  coord_flip()+\n  scale_fill_brewer(palette = \"Set1\",\n                    guide = guide_legend(reverse = TRUE))+\n  theme_minimal() +\n  theme(legend.position = \"bottom\", panel.grid = element_blank())+\n  labs(fill=\"10K steps?\", \n       x=\"\", y=\"Days with 10K achievement (%)\")\n```\n\n## Season\n\nI want to turn the focus now to the seasonality of the data. I will use a helper function `getSeason()` that I took from [StackOverflow](https://stackoverflow.com/questions/9500114/find-which-season-a-particular-date-belongs-to).\n\n```{r}\n#| label: helper\n#| echo: false\n\n# from here\n# https://stackoverflow.com/questions/9500114/find-which-season-a-particular-date-belongs-to\n\ngetSeason <- function(DATES) {\n    WS <- as.Date(\"2012-12-15\", format = \"%Y-%m-%d\") # Winter Solstice\n    SE <- as.Date(\"2012-3-15\",  format = \"%Y-%m-%d\") # Spring Equinox\n    SS <- as.Date(\"2012-6-15\",  format = \"%Y-%m-%d\") # Summer Solstice\n    FE <- as.Date(\"2012-9-15\",  format = \"%Y-%m-%d\") # Fall Equinox\n\n    # Convert dates from any year to 2012 dates\n    d <- as.Date(strftime(DATES, format=\"2012-%m-%d\"))\n\n    ifelse (d >= WS | d < SE, \"Winter\",\n      ifelse (d >= SE & d < SS, \"Spring\",\n        ifelse (d >= SS & d < FE, \"Summer\", \"Fall\")))\n}\n\n```\n\nWe can inspect the effect of season on my walking.\n\n```{r}\n\n# levels = c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")\nseason_colors <- c(\"#5EADBF\", \"#A60311\", \"#A67D03\", \"#3C1A2F\") \n\ndaily_steps %>%\n  mutate(season = factor(getSeason(dateTime), levels = c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")),\n         year = lubridate::year(dateTime)) %>%\n  ggplot(aes(dateTime, total_value))+\n  geom_point(aes(color=season))+\n  scale_y_continuous(breaks = c(0, 10^4, 2*10^4, 3*10^4),\n                     labels = scales::unit_format(unit = \"K\", sep = \"\", scale = 10^-3)) +\n  theme_bw() +\n  labs(y=\"Daily Number of Steps\", \n       x=\"\",\n       title=\"Daily number of steps by date\",\n       caption=\"@NeuroMLA\")+\n  scale_x_date(#breaks=\"3 months\",\n               date_labels = \"%Y-%b\") +\n  theme(legend.position = \"bottom\") +\n  scale_color_manual(values = season_colors)\n# facet_grid does not really help\n# facet_grid(year ~ season)+\n\n```\n\n\nThe plot above is not good, it fails to communicate. I think this is a better way to show the data. \n\n```{r}\n# levels = c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")\nseason_colors <- c(\"#5EADBF\", \"#A60311\", \"#A67D03\", \"#3C1A2F\") \n\ndaily_steps %>%\n  mutate(season = factor(getSeason(dateTime), levels = c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")),\n         year = lubridate::year(dateTime)) %>%\n  ggplot(aes(season, total_value, color = season)) +\n  ggbeeswarm::geom_quasirandom(show.legend = FALSE) +\n  scale_color_manual(values = season_colors) +\n  scale_y_continuous(breaks = c(0, 10^4, 2*10^4, 3*10^4),\n                   labels = scales::unit_format(unit = \"K\", sep = \"\", scale = 10^-3)) +\n  theme_bw() +\n  labs(y=\"Daily Number of Steps\", \n       x=\"\",\n       title=\"Daily number of steps by date\",\n       caption=\"@NeuroMLA\")\n```\n\n\n## A year's heart rate in one plot\n\nI'm borrowing **heavily** from [Nick](https://livefreeordichotomize.com/2017/12/27/a-year-as-told-by-fitbit/) here. But I thought it was a brilliant plot, so I took it for a ride with my data. I actually changed a few things, I decided to keep the native sampling rate and use `geom_line()` instead of down-sampling and using `geom_tile()`. The overall trend is clear, movements during the morning and the afternoon that correlate well with going and coming back from work. Somewhere around July 2019 you can see the change in timezone when I took vacations. There are a couple of days in late May with continuously high or lacking values, I take this as one of the days I forgot the fitbit at home, likely spurious measures. \n\n```{r}\n#| label: hear-rate\n#| eval: false\n\nheart %>%\n    ggplot(aes(dataset_time, dateTime, color = value)) +\n  # geom_point(pch=\"|\")+\n    geom_line(aes(group = dateTime)) +\n    my_hour_scale +\n   scale_y_date(date_labels = \"%Y-%b\", expand = c(0, 0)) +\n   scale_color_gradientn(guide = \"legend\", colours = RColorBrewer::brewer.pal(n = 9, name = \"Oranges\")) +\n    theme_minimal() +\n    theme(\n      legend.position = \"bottom\",\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank()\n    )+\n    labs(y=\"\", \n       x=\"\",\n       title = \"Heart Rate\",\n       subtitle = \"Each row represents one day.\",\n       caption=\"@NeuroMLA\")-> heart_plot\n\n#ggsave(plot = heart_plot, \"heart_plot.png\")\n```\n\n![](heart_plot.png)\n\n## Code\n\nThe code for this post is quite long and I thought it would get in the way. I am happy to share upon request, hit me up on [Twitter](https://twitter.com/NeuroMLA) or in the comments below.\n\n## Sources\n\n* https://livefreeordichotomize.com/2017/12/27/a-year-as-told-by-fitbit/\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"filters":["social-embeds","social-share"],"include-after-body":["../../footer.html"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","comments":{"utterances":{"repo":"matiasandina/Webpage","label":"Comment","theme":"github-dark"}},"theme":{"light":["flatly","../../theme.scss"],"dark":["darkly","../../dark.scss"]},"code-copy":true,"grid":{"body-width":"900px","margin-width":"300px","gutter-width":"1.5rem"},"title-block-banner":true,"license":"CC BY","toc-title":"Table of contents","toc-location":"right","author":[{"name":"Matias Andina","url":"https://matiasandina.netlify.app","affiliation":"Massachusetts Institute of Technology","orcid":"0000-0002-1996-2539"}],"citation":true,"share":{"permalink":"https://matiasandina.netlify.app/","description":"Matias Andina","twitter":true,"facebook":true,"reddit":true,"stumble":true,"tumblr":false,"linkedin":true,"email":true,"mastodon":true},"title":"Fitbit Analysis","date":"2019-11-22","categories":["tracking","learning","R"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}