{"title":"On pipelines","markdown":{"yaml":{"title":"On pipelines","date":"2019-11-14","categories":["R","data","reproducibility"]},"headingText":"Problems in mind","containsRefs":false,"markdown":"\n\nI have been thinking about different problems I have when writing code and the things that I normally try to do to keep my projects clean and functional. I wrote this post to put this thoughts out there, hopefully I will receive input from the great software engineers.\n\n\n\n### Where do you live?\n\nCode files usually live in one folder, which is also a GitHub folder that you and your team commit/push to. So far, so good. But what do you do with the data to feed that monster pipeline of yours?\n\nI will assume that your concerns with data privacy are minor or you handled them accordingly (only private parties have access to the data).   \n\nNow, you still have the problem of *where* to put this other folder, which is basically a size problem.\n\n> Small files can live with your data \n\nThis is the case for small and few text files of some thousand rows. Easy enough, you just go with your `/repo-name/data/` and live happily ever after.\n\n> Medium size files\n\nThese files are big enough to be a problem for hosting on GitHub. File formats start to be an issue here, images and video will not be easily accessible anywhere you take it. \n\n**Options: the cloud** ‚òÅÔ∏è \n\n**Pros:** It's fluffy. Now, seriously, it's good that your code can point to one place, download the stuff into local and use it. Every computer can do the same and there *should* be no problem. Because your sizes are not huge, you *should* be fine.\n\n**Cons:** You need internet. No, internet it's not everywhere all the time[^maybe]. Internet is not in my cellphone on a second basement in a concrete building. Even with the fastest internet, it's not trivial to setup `your-favorite-cloud-service` to allow access to `the-sketchy-script-you-wrote`[^borrow]. \n\n<center>\n![](simple_credentials.jpg)\n</center>\n\n***\n\n**Options: Good old-fashioned external hard drive.** üíæ\n\n**Pros:** This is a good one if your data size is in the Gb range and you don't really need to share it with too many people. \n\n**Cons:** Hard drives fail. Are you ready to lose your data? It starts to get really annoying when you have to do back-ups of your data and your data is big enough that you can't use your computer's hard drive (that's why you chose an external hard drive in the first place). Should you have an external hard drive for the external hard drive? Are you planning to write the output of your code on those hard drives? Brace for impact.\n\n<center>\n![](spiderman_pointing_meme.jpg)\n</center>\n\nExternal hard-drives might have paths that change depending on which computer is connected to. This can easily be a path inferno. Moreover, some hard drives don't work if you try to use them in different OS. \n\n> Large sizes\n\nI work with brains. Last time I checked, one mouse brain is `~2TB`, n=1, just a few channels, not even the best resolution we can get.\n\nI think local/cloud servers are the only way to go here[^yet]. I don't have a lot of experience with this, but I have suffered internet upload/download speed problems when I try to sync with my cloud back-ups or share image/video files with my team.\n\n### Paths need to be absolute\n\nBecause your working directory is the folder where your code lives[^wd], but your data folder lives elsewhere, you kind of need to use absolute paths all the time. \n\nI have only been able to fix this issue using functions that attempt to fix this when running the script.\n\n```{r}\n#| echo: true\n#| eval: false\nfix_working_environment <- function(saved_path,\n                                    local_path){\n  # if the folder structure doesn't work as expected...\n  # this will explode \n  stringr::str_replace(saved_path,\n                       \"some_regular_expression\",\n                       local_path)\n}\n\n```\n\nThis is particularly annoying when you have to run commands that involve calling things from console.\n\nLet's call `ImageJ` from R.\n\n```{r}\n#| eval: false\n#| echo: true\nsystem(paste(\"/home/matias/Downloads/Fiji.app/ImageJ-linux64 --run\",\n             macro_to_run))\n\n```\n\nThe moment somebody changes the Fiji folder, or tries to call ImageJ from another computer, that code brakes. I'm unaware of how to make sure these things bullet-proof, **please enlighten me**.  \n\nLet's call `python` from R. Wait, what version of python do you want? I rest my case.\n\n### Processes are identified by the files\n\nI have this problem quite often. It might be because my pipelines follow this logic.\n\n\n```{r}\n#| echo: false\nlibrary(DiagrammeR)\nmermaid(\"\n\ngraph LR\nD(Raw Data)\nA[List all files] -->|Apply functions| B[Write computation]\nD --> A\nB --> C(New files)\nC --> A\n\nlinkStyle 0 stroke-width:2px,fill:none,stroke:pink;\nlinkStyle 1 stroke-width:2px,fill:none,stroke:pink;\nlinkStyle 2 stroke-width:2px,fill:none,stroke:pink;\nlinkStyle 3 stroke-width:2px,fill:none,stroke:pink;     style A fill:#f9f, stroke:#333,stroke-width:1px        \nstyle B fill:#f9f,stroke:#333,stroke-width:1px        \n        \")\n```\n\n\n\n\nIt's quite difficult to escape the infinite `list all files` --> `apply function to all files` --> `write computations into new files` loop. I don't really know what's on the other side. \n\nThe main problem is that your previous, current, and next files always serve as identifiers and you need to carry over their absolute path (to be able to read them form your data folder). Whenever these paths get corrupted (or you change your computer) things stop working.\n\nThis problem might stem from the fact that I normally have to process experimental units through the pipeline. I have to do many things to an experimental unit and have many many experimental units composing the data for one pipeline. That's when my inner voice goes:\n\n> But I would also like to have the possibility to run or re-run just one (or just a few experimental units).\n\nThe way I handle this is by leaving open the door to hand selection of files (aka interactive mode, not fun). However, interactive mode somewhat helps with the problem below.\n\n### Don't move my files\n\nPeople do stuff people normally do, like moving folders around...that's BAD, REALLY BAD. It's also quite difficult to communicate the need to keep the file structure without casting the magic spells of *everything will break*[^yourcomputer].\n\nI don't feel good with the level of dependency on file structure that my projects always end up having. **Please enlighten me on this one too!**\n\n### Don't rename my files\n\nDon't rename my files, except when I do. That would be a better subtitle of this section. A great way of not dealing with multiple copies of the same files. For example, let's say you applied a mask to an image and then cropped, and rotated it. How many files do you keep? What if your image size was 1 Gb? \n\nMy hack around this is to rename the files (this include the cases where I just want to move files to specific sub-folders). Because I rely so much on the file names, this renaming usually comes back to bite me. I just ü§∑.\n\n### Operating systems\n\nI'm writing this in 2019, I thought the OS problem was solved. Turns out it's not solved at all and developers shy away from it more often than they should. I understand them, developing for every OS is a huge pain and requires you to constantly check in multiple machines (or have access to a teammate that breaks your code as soon as you push it).\n\n***\n\n## What is your approach? \n\nThis is something I will continue to think for a long time, and my approach might need to be adjusted to each situation. What is your current approach?\n\n\n[^yet]: And yet, for many practical reasons, I never do this.\n[^maybe]: Maybe I should say moderately fast and stable internet.\n[^wd]: And you should **never** forcefully set the working directory elsewhere.\n[^yourcomputer]: Yes, your computer is on the line! And I will get all your passwords (?).\n[^borrow]: Image borrowed from [here](https://freek.dev/459-how-to-setup-and-use-the-google-calendar-api)\n","srcMarkdownNoYaml":"\n\nI have been thinking about different problems I have when writing code and the things that I normally try to do to keep my projects clean and functional. I wrote this post to put this thoughts out there, hopefully I will receive input from the great software engineers.\n\n\n## Problems in mind\n\n### Where do you live?\n\nCode files usually live in one folder, which is also a GitHub folder that you and your team commit/push to. So far, so good. But what do you do with the data to feed that monster pipeline of yours?\n\nI will assume that your concerns with data privacy are minor or you handled them accordingly (only private parties have access to the data).   \n\nNow, you still have the problem of *where* to put this other folder, which is basically a size problem.\n\n> Small files can live with your data \n\nThis is the case for small and few text files of some thousand rows. Easy enough, you just go with your `/repo-name/data/` and live happily ever after.\n\n> Medium size files\n\nThese files are big enough to be a problem for hosting on GitHub. File formats start to be an issue here, images and video will not be easily accessible anywhere you take it. \n\n**Options: the cloud** ‚òÅÔ∏è \n\n**Pros:** It's fluffy. Now, seriously, it's good that your code can point to one place, download the stuff into local and use it. Every computer can do the same and there *should* be no problem. Because your sizes are not huge, you *should* be fine.\n\n**Cons:** You need internet. No, internet it's not everywhere all the time[^maybe]. Internet is not in my cellphone on a second basement in a concrete building. Even with the fastest internet, it's not trivial to setup `your-favorite-cloud-service` to allow access to `the-sketchy-script-you-wrote`[^borrow]. \n\n<center>\n![](simple_credentials.jpg)\n</center>\n\n***\n\n**Options: Good old-fashioned external hard drive.** üíæ\n\n**Pros:** This is a good one if your data size is in the Gb range and you don't really need to share it with too many people. \n\n**Cons:** Hard drives fail. Are you ready to lose your data? It starts to get really annoying when you have to do back-ups of your data and your data is big enough that you can't use your computer's hard drive (that's why you chose an external hard drive in the first place). Should you have an external hard drive for the external hard drive? Are you planning to write the output of your code on those hard drives? Brace for impact.\n\n<center>\n![](spiderman_pointing_meme.jpg)\n</center>\n\nExternal hard-drives might have paths that change depending on which computer is connected to. This can easily be a path inferno. Moreover, some hard drives don't work if you try to use them in different OS. \n\n> Large sizes\n\nI work with brains. Last time I checked, one mouse brain is `~2TB`, n=1, just a few channels, not even the best resolution we can get.\n\nI think local/cloud servers are the only way to go here[^yet]. I don't have a lot of experience with this, but I have suffered internet upload/download speed problems when I try to sync with my cloud back-ups or share image/video files with my team.\n\n### Paths need to be absolute\n\nBecause your working directory is the folder where your code lives[^wd], but your data folder lives elsewhere, you kind of need to use absolute paths all the time. \n\nI have only been able to fix this issue using functions that attempt to fix this when running the script.\n\n```{r}\n#| echo: true\n#| eval: false\nfix_working_environment <- function(saved_path,\n                                    local_path){\n  # if the folder structure doesn't work as expected...\n  # this will explode \n  stringr::str_replace(saved_path,\n                       \"some_regular_expression\",\n                       local_path)\n}\n\n```\n\nThis is particularly annoying when you have to run commands that involve calling things from console.\n\nLet's call `ImageJ` from R.\n\n```{r}\n#| eval: false\n#| echo: true\nsystem(paste(\"/home/matias/Downloads/Fiji.app/ImageJ-linux64 --run\",\n             macro_to_run))\n\n```\n\nThe moment somebody changes the Fiji folder, or tries to call ImageJ from another computer, that code brakes. I'm unaware of how to make sure these things bullet-proof, **please enlighten me**.  \n\nLet's call `python` from R. Wait, what version of python do you want? I rest my case.\n\n### Processes are identified by the files\n\nI have this problem quite often. It might be because my pipelines follow this logic.\n\n\n```{r}\n#| echo: false\nlibrary(DiagrammeR)\nmermaid(\"\n\ngraph LR\nD(Raw Data)\nA[List all files] -->|Apply functions| B[Write computation]\nD --> A\nB --> C(New files)\nC --> A\n\nlinkStyle 0 stroke-width:2px,fill:none,stroke:pink;\nlinkStyle 1 stroke-width:2px,fill:none,stroke:pink;\nlinkStyle 2 stroke-width:2px,fill:none,stroke:pink;\nlinkStyle 3 stroke-width:2px,fill:none,stroke:pink;     style A fill:#f9f, stroke:#333,stroke-width:1px        \nstyle B fill:#f9f,stroke:#333,stroke-width:1px        \n        \")\n```\n\n\n\n\nIt's quite difficult to escape the infinite `list all files` --> `apply function to all files` --> `write computations into new files` loop. I don't really know what's on the other side. \n\nThe main problem is that your previous, current, and next files always serve as identifiers and you need to carry over their absolute path (to be able to read them form your data folder). Whenever these paths get corrupted (or you change your computer) things stop working.\n\nThis problem might stem from the fact that I normally have to process experimental units through the pipeline. I have to do many things to an experimental unit and have many many experimental units composing the data for one pipeline. That's when my inner voice goes:\n\n> But I would also like to have the possibility to run or re-run just one (or just a few experimental units).\n\nThe way I handle this is by leaving open the door to hand selection of files (aka interactive mode, not fun). However, interactive mode somewhat helps with the problem below.\n\n### Don't move my files\n\nPeople do stuff people normally do, like moving folders around...that's BAD, REALLY BAD. It's also quite difficult to communicate the need to keep the file structure without casting the magic spells of *everything will break*[^yourcomputer].\n\nI don't feel good with the level of dependency on file structure that my projects always end up having. **Please enlighten me on this one too!**\n\n### Don't rename my files\n\nDon't rename my files, except when I do. That would be a better subtitle of this section. A great way of not dealing with multiple copies of the same files. For example, let's say you applied a mask to an image and then cropped, and rotated it. How many files do you keep? What if your image size was 1 Gb? \n\nMy hack around this is to rename the files (this include the cases where I just want to move files to specific sub-folders). Because I rely so much on the file names, this renaming usually comes back to bite me. I just ü§∑.\n\n### Operating systems\n\nI'm writing this in 2019, I thought the OS problem was solved. Turns out it's not solved at all and developers shy away from it more often than they should. I understand them, developing for every OS is a huge pain and requires you to constantly check in multiple machines (or have access to a teammate that breaks your code as soon as you push it).\n\n***\n\n## What is your approach? \n\nThis is something I will continue to think for a long time, and my approach might need to be adjusted to each situation. What is your current approach?\n\n\n[^yet]: And yet, for many practical reasons, I never do this.\n[^maybe]: Maybe I should say moderately fast and stable internet.\n[^wd]: And you should **never** forcefully set the working directory elsewhere.\n[^yourcomputer]: Yes, your computer is on the line! And I will get all your passwords (?).\n[^borrow]: Image borrowed from [here](https://freek.dev/459-how-to-setup-and-use-the-google-calendar-api)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"filters":["social-embeds","social-share"],"include-after-body":["../../footer.html"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","editor":"visual","comments":{"utterances":{"repo":"matiasandina/Webpage","label":"Comment","theme":"github-dark"}},"theme":{"light":"cosmo","dark":"cosmo"},"code-copy":true,"title-block-banner":true,"license":"CC BY","toc-title":"Table of contents","toc-location":"right","author":[{"name":"Matias Andina","url":"https://matiasandina.netlify.app","affiliation":"Massachusetts Institute of Technology","orcid":"0000-0002-1996-2539"}],"citation":true,"share":{"permalink":"https://matiasandina.netlify.app/","description":"Matias Andina","twitter":true,"facebook":true,"reddit":true,"stumble":true,"tumblr":false,"linkedin":true,"email":true,"mastodon":true},"title":"On pipelines","date":"2019-11-14","categories":["R","data","reproducibility"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}