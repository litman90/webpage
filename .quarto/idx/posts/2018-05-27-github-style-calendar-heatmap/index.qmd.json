{"title":"Github style calendar heatmaps","markdown":{"yaml":{"title":"Github style calendar heatmaps","date":"2018-05-27","categories":["research","design","R"],"execute":{"echo":true},"code-fold":true,"code-summary":"Show the code"},"headingText":"The Commit Heatmap","containsRefs":false,"markdown":"\n\n\nI like how the commit heatmap looks in Github. I wanted to play with something that could be plotted that way. I've seen some beautiful things done in `d3` and javascript. But, of course, I wanted to make it in `R`. Turns out a bunch of other people have great ideas for how to go about it. Thus, I'm borrowing heavily from them[^1].\n\n[^1]: Great resources [here](https://vuorre.netlify.com/post/2016/2016-03-24-github-waffle-plot/), [and here](http://ethen8181.github.io/Business-Analytics/articles/calendar_heatmaps/calendar_heatmaps.html)\n\n## Loading packages\n\nWe will need a few packages to generate this plot.\n\n```{r}\n#| label: setup\n#| message: !expr F\n#| warning: !expr F\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(viridis)  # Color palette\nlibrary(ggthemes) # theme tufte\n\n\n```\n\n## The data\n\nLet's generate a `data.frame` for May 2018. We want the `date` as `datetime` and we also want to extract values from that date (month, year, week, ...).\n\n```{r}\n# choose dates\nstart_date <- ymd(\"2018-05-01\")\nend_date <- ymd(\"2018-05-31\")\n\nd <- tibble::tibble(\n    date = seq(start_date, end_date, by = \"days\"),\n    month = month(date),\n    year = format(date, \"%Y\"),\n    week = as.integer(format(date, \"%W\")) + 1,  # Week starts at 1\n    day = factor(weekdays(date, T), \n                 levels = rev(c(\"Mon\", \"Tue\", \"Wed\", \"Thu\",\n                                \"Fri\", \"Sat\", \"Sun\"))))\n\n\n```\n\nThis is how the data we generated looks like:\n\n```{r}\n#| label: data-preview\n\nhead(d)\n\n```\n\nNow, let's assume I registered some events in my life and that my data looks something like: A date column `date`, and the number of events that happened on a particular date (`n`).\n\n```{r}\n#| label: toy-data\n#| echo: !expr F\n\ndf <- structure(list(date = structure(c(17666, 17667, 17668, 17669, \n17670, 17671, 17672, 17673, 17674, 17675, 17676, 17677, 17678\n), class = \"Date\"), n = c(1L, 1L, 1L, 2L, 4L, 2L, 2L, 2L, 2L, \n5L, 2L, 1L, 4L)), .Names = c(\"date\", \"n\"), class = c(\"tbl_df\", \n\"tbl\", \"data.frame\"), row.names = c(NA, -13L))\n\n```\n\nAgain, here's how the data looks like.\n\n```{r}\n#| label: mydata\n\ndf\n\n```\n\nI can join both `data.frames` and visualize!\n\n```{r}\n#| label: line-plot\n#| warning: false\n\ndf_plot <- d %>% left_join(df, by = \"date\") \n\ndf_plot %>%\n  mutate(n=ifelse(is.na(n), 0, n)) %>% ## Fill the NAs with zeros\n  ggplot(aes(date, n)) +\n  geom_line(lwd=0.7)+\n  geom_point(size=2, shape=21, fill=\"black\", colour=\"white\", stroke=2)+\n    theme_classic() +\n  theme(panel.background = element_rect(colour = \"black\"))+\n  ylab(\"Number of events\")\n\n```\n\nMy goal is not to analyze long term trends like seasonality. Thus, this plot is rather unremarkable. Not only because it is a small toy-like dataset, but because it fails to inform calendar information. Let's try to make it better!\n\n## Abstracting into functions\n\nA good way of improving the procedure is to abstract things into a function we can call `calendar_plot()`.\n\n```{r}\n\ncalendar_plot <- function(data, color.scale = \"viridis\",\n                          viridis.pal = \"D\", dir = 1){\n  \n  p <- ggplot(data, aes(x = week, y = day, fill = n)) +\n    geom_tile(color = \"white\", size = 0.8) +\n    facet_wrap(\"year\", ncol = 1) +\n    theme_tufte() +\n    theme(axis.ticks = element_blank(),\n          legend.position = \"bottom\",\n          legend.key.width = unit(1, \"cm\"),\n          strip.text = element_text(hjust = 0.01,\n                                    face = \"bold\", size = 12),\n          text = element_text(size=16)) + \n    ylab(\"\")\n  \n  \n  \n  # Let's add more than one possible pallete. Default keeps being viridis\n  # Add case switch? or add 'none' for user to define their own ?\n  \n  if(color.scale==\"viridis\"){\n    \n    \n    p <- p + scale_fill_viridis(name=\"Number of Events\", \n                                # Variable color palette\n                                option = viridis.pal,  \n                                # Variable color direction\n                                direction = dir,  \n                                na.value = \"grey93\",\n                                limits = c(1, max(data$n)))\n    \n  } else if(color.scale == 'greens') {\n    \n    p <- p + \n      scale_fill_gradient(name=\"Number of Events\",\n                          low=\"lightyellow2\", \n                          high=\"darkgreen\", \n                          na.value = \"grey93\")\n  } else{\n    \n    error(\"Accepted color.scale are 'viridis' and 'greens'\")\n    \n  }\n  \n  \n  ## x axis control of labels\n  \n  \n  num_months <- length(unique(data$month))\n  \n  if(num_months > 1){\n    \n    p <- p + scale_x_continuous(\n      expand = c(0, 0),\n      breaks = seq(1, 52, length = 12),\n      labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\n    \n  } else {\n    \n    # do nothing\n    \n    p <- p + xlab(\"Week Number.\")\n    \n  }\n  \n  \n  \n  print(p)\n}\n\n\n```\n\nWe can use `calendar_plot()` function now to make a plot in *calendar-like* shape. It is easier to see the data, even with such as small dataset. Below there are two color scale representations of the same data.\n\n```{r}\n#| label: calendar-plot\n\ncalendar_plot(df_plot, 'greens')\n\ncalendar_plot(df_plot, viridis.pal = \"B\")\n\n```\n\n------------------------------------------------------------------------\n\n## Update\n\nI was curious about how data would look like for a longer span. Here's the data for a longer time interval.\n\n```{r}\n#| label: updated-data\n#| echo: false\n\ndf <- read.csv(file = '2018-05-27_longer_data.csv',\n               stringsAsFactors = FALSE)\n# Convert to date\ndf$date <- ymd(df$date)\n# choose dates\nstart_date <- ymd(\"2018-05-01\")\nend_date <- ymd(\"2018-08-31\")\n\nd <- data_frame(\n    date = seq(start_date, end_date, by = \"days\"),\n    month = month(date),\n    year = format(date, \"%Y\"),\n    week = as.integer(format(date, \"%W\")) + 1,  # Week starts at 1\n    day = factor(weekdays(date, T), \n                 levels = rev(c(\"Mon\", \"Tue\", \"Wed\", \"Thu\",\n                                \"Fri\", \"Sat\", \"Sun\"))))\n\ndf_plot <- d %>% left_join(df, by = \"date\") \n\n\n```\n\n```{r}\n#| label: update-plot\n\ncalendar_plot(df_plot)\n\n```\n\nBy no means this is a perfect function and is far from tested. For example, when I did this update, I realized that my `calendar_plot()` function should handle internally the creation of the `data.frame` named `d` that serves as a placeholder. I guess that will happen in a following update `:)`.\n\n------------------------------------------------------------------------\n","srcMarkdownNoYaml":"\n\n## The Commit Heatmap\n\nI like how the commit heatmap looks in Github. I wanted to play with something that could be plotted that way. I've seen some beautiful things done in `d3` and javascript. But, of course, I wanted to make it in `R`. Turns out a bunch of other people have great ideas for how to go about it. Thus, I'm borrowing heavily from them[^1].\n\n[^1]: Great resources [here](https://vuorre.netlify.com/post/2016/2016-03-24-github-waffle-plot/), [and here](http://ethen8181.github.io/Business-Analytics/articles/calendar_heatmaps/calendar_heatmaps.html)\n\n## Loading packages\n\nWe will need a few packages to generate this plot.\n\n```{r}\n#| label: setup\n#| message: !expr F\n#| warning: !expr F\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(viridis)  # Color palette\nlibrary(ggthemes) # theme tufte\n\n\n```\n\n## The data\n\nLet's generate a `data.frame` for May 2018. We want the `date` as `datetime` and we also want to extract values from that date (month, year, week, ...).\n\n```{r}\n# choose dates\nstart_date <- ymd(\"2018-05-01\")\nend_date <- ymd(\"2018-05-31\")\n\nd <- tibble::tibble(\n    date = seq(start_date, end_date, by = \"days\"),\n    month = month(date),\n    year = format(date, \"%Y\"),\n    week = as.integer(format(date, \"%W\")) + 1,  # Week starts at 1\n    day = factor(weekdays(date, T), \n                 levels = rev(c(\"Mon\", \"Tue\", \"Wed\", \"Thu\",\n                                \"Fri\", \"Sat\", \"Sun\"))))\n\n\n```\n\nThis is how the data we generated looks like:\n\n```{r}\n#| label: data-preview\n\nhead(d)\n\n```\n\nNow, let's assume I registered some events in my life and that my data looks something like: A date column `date`, and the number of events that happened on a particular date (`n`).\n\n```{r}\n#| label: toy-data\n#| echo: !expr F\n\ndf <- structure(list(date = structure(c(17666, 17667, 17668, 17669, \n17670, 17671, 17672, 17673, 17674, 17675, 17676, 17677, 17678\n), class = \"Date\"), n = c(1L, 1L, 1L, 2L, 4L, 2L, 2L, 2L, 2L, \n5L, 2L, 1L, 4L)), .Names = c(\"date\", \"n\"), class = c(\"tbl_df\", \n\"tbl\", \"data.frame\"), row.names = c(NA, -13L))\n\n```\n\nAgain, here's how the data looks like.\n\n```{r}\n#| label: mydata\n\ndf\n\n```\n\nI can join both `data.frames` and visualize!\n\n```{r}\n#| label: line-plot\n#| warning: false\n\ndf_plot <- d %>% left_join(df, by = \"date\") \n\ndf_plot %>%\n  mutate(n=ifelse(is.na(n), 0, n)) %>% ## Fill the NAs with zeros\n  ggplot(aes(date, n)) +\n  geom_line(lwd=0.7)+\n  geom_point(size=2, shape=21, fill=\"black\", colour=\"white\", stroke=2)+\n    theme_classic() +\n  theme(panel.background = element_rect(colour = \"black\"))+\n  ylab(\"Number of events\")\n\n```\n\nMy goal is not to analyze long term trends like seasonality. Thus, this plot is rather unremarkable. Not only because it is a small toy-like dataset, but because it fails to inform calendar information. Let's try to make it better!\n\n## Abstracting into functions\n\nA good way of improving the procedure is to abstract things into a function we can call `calendar_plot()`.\n\n```{r}\n\ncalendar_plot <- function(data, color.scale = \"viridis\",\n                          viridis.pal = \"D\", dir = 1){\n  \n  p <- ggplot(data, aes(x = week, y = day, fill = n)) +\n    geom_tile(color = \"white\", size = 0.8) +\n    facet_wrap(\"year\", ncol = 1) +\n    theme_tufte() +\n    theme(axis.ticks = element_blank(),\n          legend.position = \"bottom\",\n          legend.key.width = unit(1, \"cm\"),\n          strip.text = element_text(hjust = 0.01,\n                                    face = \"bold\", size = 12),\n          text = element_text(size=16)) + \n    ylab(\"\")\n  \n  \n  \n  # Let's add more than one possible pallete. Default keeps being viridis\n  # Add case switch? or add 'none' for user to define their own ?\n  \n  if(color.scale==\"viridis\"){\n    \n    \n    p <- p + scale_fill_viridis(name=\"Number of Events\", \n                                # Variable color palette\n                                option = viridis.pal,  \n                                # Variable color direction\n                                direction = dir,  \n                                na.value = \"grey93\",\n                                limits = c(1, max(data$n)))\n    \n  } else if(color.scale == 'greens') {\n    \n    p <- p + \n      scale_fill_gradient(name=\"Number of Events\",\n                          low=\"lightyellow2\", \n                          high=\"darkgreen\", \n                          na.value = \"grey93\")\n  } else{\n    \n    error(\"Accepted color.scale are 'viridis' and 'greens'\")\n    \n  }\n  \n  \n  ## x axis control of labels\n  \n  \n  num_months <- length(unique(data$month))\n  \n  if(num_months > 1){\n    \n    p <- p + scale_x_continuous(\n      expand = c(0, 0),\n      breaks = seq(1, 52, length = 12),\n      labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\n    \n  } else {\n    \n    # do nothing\n    \n    p <- p + xlab(\"Week Number.\")\n    \n  }\n  \n  \n  \n  print(p)\n}\n\n\n```\n\nWe can use `calendar_plot()` function now to make a plot in *calendar-like* shape. It is easier to see the data, even with such as small dataset. Below there are two color scale representations of the same data.\n\n```{r}\n#| label: calendar-plot\n\ncalendar_plot(df_plot, 'greens')\n\ncalendar_plot(df_plot, viridis.pal = \"B\")\n\n```\n\n------------------------------------------------------------------------\n\n## Update\n\nI was curious about how data would look like for a longer span. Here's the data for a longer time interval.\n\n```{r}\n#| label: updated-data\n#| echo: false\n\ndf <- read.csv(file = '2018-05-27_longer_data.csv',\n               stringsAsFactors = FALSE)\n# Convert to date\ndf$date <- ymd(df$date)\n# choose dates\nstart_date <- ymd(\"2018-05-01\")\nend_date <- ymd(\"2018-08-31\")\n\nd <- data_frame(\n    date = seq(start_date, end_date, by = \"days\"),\n    month = month(date),\n    year = format(date, \"%Y\"),\n    week = as.integer(format(date, \"%W\")) + 1,  # Week starts at 1\n    day = factor(weekdays(date, T), \n                 levels = rev(c(\"Mon\", \"Tue\", \"Wed\", \"Thu\",\n                                \"Fri\", \"Sat\", \"Sun\"))))\n\ndf_plot <- d %>% left_join(df, by = \"date\") \n\n\n```\n\n```{r}\n#| label: update-plot\n\ncalendar_plot(df_plot)\n\n```\n\nBy no means this is a perfect function and is far from tested. For example, when I did this update, I realized that my `calendar_plot()` function should handle internally the creation of the `data.frame` named `d` that serves as a placeholder. I guess that will happen in a following update `:)`.\n\n------------------------------------------------------------------------\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"filters":["social-embeds","social-share"],"include-after-body":["../../footer.html"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","comments":{"utterances":{"repo":"matiasandina/Webpage","label":"Comment","theme":"github-dark"}},"theme":{"light":["flatly","../../theme.scss"],"dark":["darkly","../../dark.scss"]},"code-copy":true,"grid":{"body-width":"900px","margin-width":"300px","gutter-width":"1.5rem"},"title-block-banner":true,"license":"CC BY","toc-title":"Table of contents","toc-location":"right","author":[{"name":"Matias Andina","url":"https://matiasandina.netlify.app","affiliation":"Massachusetts Institute of Technology","orcid":"0000-0002-1996-2539"}],"citation":true,"share":{"permalink":"https://matiasandina.netlify.app/","description":"Matias Andina","twitter":true,"facebook":true,"reddit":true,"stumble":true,"tumblr":false,"linkedin":true,"email":true,"mastodon":true},"title":"Github style calendar heatmaps","date":"2018-05-27","categories":["research","design","R"],"code-summary":"Show the code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}